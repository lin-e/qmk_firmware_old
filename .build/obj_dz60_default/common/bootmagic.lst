   1               		.file	"bootmagic.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.scan_keycode,"ax",@progbits
  12               	scan_keycode:
  13               	.LFB104:
  14               		.file 1 "./tmk_core/common/bootmagic.c"
   1:./tmk_core/common/bootmagic.c **** #include <stdint.h>
   2:./tmk_core/common/bootmagic.c **** #include <stdbool.h>
   3:./tmk_core/common/bootmagic.c **** #include "wait.h"
   4:./tmk_core/common/bootmagic.c **** #include "matrix.h"
   5:./tmk_core/common/bootmagic.c **** #include "bootloader.h"
   6:./tmk_core/common/bootmagic.c **** #include "debug.h"
   7:./tmk_core/common/bootmagic.c **** #include "keymap.h"
   8:./tmk_core/common/bootmagic.c **** #include "host.h"
   9:./tmk_core/common/bootmagic.c **** #include "action_layer.h"
  10:./tmk_core/common/bootmagic.c **** #include "eeconfig.h"
  11:./tmk_core/common/bootmagic.c **** #include "bootmagic.h"
  12:./tmk_core/common/bootmagic.c **** 
  13:./tmk_core/common/bootmagic.c **** keymap_config_t keymap_config;
  14:./tmk_core/common/bootmagic.c **** 
  15:./tmk_core/common/bootmagic.c **** /** \brief Bootmagic
  16:./tmk_core/common/bootmagic.c ****  *
  17:./tmk_core/common/bootmagic.c ****  * FIXME: needs doc
  18:./tmk_core/common/bootmagic.c ****  */
  19:./tmk_core/common/bootmagic.c **** void bootmagic(void)
  20:./tmk_core/common/bootmagic.c **** {
  21:./tmk_core/common/bootmagic.c ****     /* check signature */
  22:./tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
  23:./tmk_core/common/bootmagic.c ****         eeconfig_init();
  24:./tmk_core/common/bootmagic.c ****     }
  25:./tmk_core/common/bootmagic.c **** 
  26:./tmk_core/common/bootmagic.c ****     /* do scans in case of bounce */
  27:./tmk_core/common/bootmagic.c ****     print("bootmagic scan: ... ");
  28:./tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
  29:./tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); wait_ms(10); }
  30:./tmk_core/common/bootmagic.c ****     print("done.\n");
  31:./tmk_core/common/bootmagic.c **** 
  32:./tmk_core/common/bootmagic.c ****     /* bootmagic skip */
  33:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
  34:./tmk_core/common/bootmagic.c ****         return;
  35:./tmk_core/common/bootmagic.c ****     }
  36:./tmk_core/common/bootmagic.c **** 
  37:./tmk_core/common/bootmagic.c ****     /* eeconfig clear */
  38:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
  39:./tmk_core/common/bootmagic.c ****         eeconfig_init();
  40:./tmk_core/common/bootmagic.c ****     }
  41:./tmk_core/common/bootmagic.c **** 
  42:./tmk_core/common/bootmagic.c ****     /* bootloader */
  43:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
  44:./tmk_core/common/bootmagic.c ****         bootloader_jump();
  45:./tmk_core/common/bootmagic.c ****     }
  46:./tmk_core/common/bootmagic.c **** 
  47:./tmk_core/common/bootmagic.c ****     /* debug enable */
  48:./tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
  49:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
  50:./tmk_core/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
  51:./tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
  52:./tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
  53:./tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
  54:./tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
  55:./tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
  56:./tmk_core/common/bootmagic.c ****         } else {
  57:./tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
  58:./tmk_core/common/bootmagic.c ****         }
  59:./tmk_core/common/bootmagic.c ****     }
  60:./tmk_core/common/bootmagic.c ****     eeconfig_update_debug(debug_config.raw);
  61:./tmk_core/common/bootmagic.c **** 
  62:./tmk_core/common/bootmagic.c ****     /* keymap config */
  63:./tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
  64:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
  65:./tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
  66:./tmk_core/common/bootmagic.c ****     }
  67:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
  68:./tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
  69:./tmk_core/common/bootmagic.c ****     }
  70:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
  71:./tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
  72:./tmk_core/common/bootmagic.c ****     }
  73:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
  74:./tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
  75:./tmk_core/common/bootmagic.c ****     }
  76:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
  77:./tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
  78:./tmk_core/common/bootmagic.c ****     }
  79:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
  80:./tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
  81:./tmk_core/common/bootmagic.c ****     }
  82:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
  83:./tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
  84:./tmk_core/common/bootmagic.c ****     }
  85:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
  86:./tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
  87:./tmk_core/common/bootmagic.c ****     }
  88:./tmk_core/common/bootmagic.c ****     eeconfig_update_keymap(keymap_config.raw);
  89:./tmk_core/common/bootmagic.c **** 
  90:./tmk_core/common/bootmagic.c ****     /* default layer */
  91:./tmk_core/common/bootmagic.c ****     uint8_t default_layer = 0;
  92:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
  93:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
  94:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
  95:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
  96:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
  97:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
  98:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
  99:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 100:./tmk_core/common/bootmagic.c ****     if (default_layer) {
 101:./tmk_core/common/bootmagic.c ****         eeconfig_update_default_layer(default_layer);
 102:./tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 103:./tmk_core/common/bootmagic.c ****     } else {
 104:./tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 105:./tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 106:./tmk_core/common/bootmagic.c ****     }
 107:./tmk_core/common/bootmagic.c **** }
 108:./tmk_core/common/bootmagic.c **** 
 109:./tmk_core/common/bootmagic.c **** /** \brief Scan Keycode
 110:./tmk_core/common/bootmagic.c ****  *
 111:./tmk_core/common/bootmagic.c ****  * FIXME: needs doc
 112:./tmk_core/common/bootmagic.c ****  */
 113:./tmk_core/common/bootmagic.c **** static bool scan_keycode(uint8_t keycode)
 114:./tmk_core/common/bootmagic.c **** {
  15               		.loc 1 114 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 AF92      		push r10
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 10, -2
  22 0002 BF92      		push r11
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 11, -3
  26 0004 CF92      		push r12
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 12, -4
  30 0006 DF92      		push r13
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 13, -5
  34 0008 EF92      		push r14
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 14, -6
  38 000a FF92      		push r15
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 15, -7
  42 000c 0F93      		push r16
  43               	.LCFI6:
  44               		.cfi_def_cfa_offset 9
  45               		.cfi_offset 16, -8
  46 000e 1F93      		push r17
  47               	.LCFI7:
  48               		.cfi_def_cfa_offset 10
  49               		.cfi_offset 17, -9
  50 0010 CF93      		push r28
  51               	.LCFI8:
  52               		.cfi_def_cfa_offset 11
  53               		.cfi_offset 28, -10
  54               	/* prologue: function */
  55               	/* frame size = 0 */
  56               	/* stack size = 9 */
  57               	.L__stack_usage = 9
  58               	.LVL1:
  59               	.LBB4:
 115:./tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  60               		.loc 1 115 0
  61 0012 C0E0      		ldi r28,0
  62               	.LBB5:
  63               	.LBB6:
 116:./tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 117:./tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 118:./tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
  64               		.loc 1 118 0
  65 0014 CC24      		clr r12
  66 0016 C394      		inc r12
  67 0018 D12C      		mov r13,__zero_reg__
 119:./tmk_core/common/bootmagic.c ****                 if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
  68               		.loc 1 119 0
  69 001a E82E      		mov r14,r24
  70 001c F12C      		mov r15,__zero_reg__
  71               	.LVL2:
  72               	.L7:
  73               	.LBE6:
 116:./tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
  74               		.loc 1 116 0
  75 001e 8C2F      		mov r24,r28
  76 0020 0E94 0000 		call matrix_get_row
  77               	.LVL3:
  78 0024 5C01      		movw r10,r24
  79               	.LVL4:
  80 0026 00E0      		ldi r16,0
  81 0028 10E0      		ldi r17,0
  82               	.LVL5:
  83               	.L3:
  84               	.LBB7:
 118:./tmk_core/common/bootmagic.c ****                 if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
  85               		.loc 1 118 0
  86 002a 9601      		movw r18,r12
  87 002c 002E      		mov r0,r16
  88 002e 00C0      		rjmp 2f
  89               		1:
  90 0030 220F      		lsl r18
  91 0032 331F      		rol r19
  92               		2:
  93 0034 0A94      		dec r0
  94 0036 02F4      		brpl 1b
  95 0038 2A21      		and r18,r10
  96 003a 3B21      		and r19,r11
  97 003c 232B      		or r18,r19
  98 003e 01F4      		brne .L2
  99               	.L6:
 100               	.LVL6:
 101 0040 0F5F      		subi r16,-1
 102 0042 1F4F      		sbci r17,-1
 103               	.LVL7:
 117:./tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
 104               		.loc 1 117 0
 105 0044 0F30      		cpi r16,15
 106 0046 1105      		cpc r17,__zero_reg__
 107 0048 01F4      		brne .L3
 108 004a 00C0      		rjmp .L13
 109               	.L2:
 110               		.loc 1 119 0
 111 004c 602F      		mov r22,r16
 112 004e 7C2F      		mov r23,r28
 113 0050 80E0      		ldi r24,0
 114 0052 0E94 0000 		call keymap_key_to_keycode
 115               	.LVL8:
 116 0056 E816      		cp r14,r24
 117 0058 F906      		cpc r15,r25
 118 005a 01F4      		brne .L6
 120:./tmk_core/common/bootmagic.c ****                     return true;
 119               		.loc 1 120 0
 120 005c 81E0      		ldi r24,lo8(1)
 121 005e 00C0      		rjmp .L5
 122               	.L13:
 123               	.LBE7:
 124               	.LBE5:
 115:./tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 125               		.loc 1 115 0 discriminator 2
 126 0060 CF5F      		subi r28,lo8(-(1))
 127               	.LVL9:
 128 0062 C530      		cpi r28,lo8(5)
 129 0064 01F4      		brne .L7
 130               	.LBE4:
 121:./tmk_core/common/bootmagic.c ****                 }
 122:./tmk_core/common/bootmagic.c ****             }
 123:./tmk_core/common/bootmagic.c ****         }
 124:./tmk_core/common/bootmagic.c ****     }
 125:./tmk_core/common/bootmagic.c ****     return false;
 131               		.loc 1 125 0
 132 0066 80E0      		ldi r24,0
 133               	.LVL10:
 134               	.L5:
 135               	/* epilogue start */
 126:./tmk_core/common/bootmagic.c **** }
 136               		.loc 1 126 0
 137 0068 CF91      		pop r28
 138               	.LVL11:
 139 006a 1F91      		pop r17
 140 006c 0F91      		pop r16
 141 006e FF90      		pop r15
 142 0070 EF90      		pop r14
 143               	.LVL12:
 144 0072 DF90      		pop r13
 145 0074 CF90      		pop r12
 146 0076 BF90      		pop r11
 147 0078 AF90      		pop r10
 148               	.LVL13:
 149 007a 0895      		ret
 150               		.cfi_endproc
 151               	.LFE104:
 153               		.section	.text.bootmagic_scan_keycode,"ax",@progbits
 154               	.global	bootmagic_scan_keycode
 156               	bootmagic_scan_keycode:
 157               	.LFB105:
 127:./tmk_core/common/bootmagic.c **** 
 128:./tmk_core/common/bootmagic.c **** /** \brief Bootmagic Scan Keycode
 129:./tmk_core/common/bootmagic.c ****  *
 130:./tmk_core/common/bootmagic.c ****  * FIXME: needs doc
 131:./tmk_core/common/bootmagic.c ****  */
 132:./tmk_core/common/bootmagic.c **** bool bootmagic_scan_keycode(uint8_t keycode)
 133:./tmk_core/common/bootmagic.c **** {
 158               		.loc 1 133 0
 159               		.cfi_startproc
 160               	.LVL14:
 161 0000 CF93      		push r28
 162               	.LCFI9:
 163               		.cfi_def_cfa_offset 3
 164               		.cfi_offset 28, -2
 165               	/* prologue: function */
 166               	/* frame size = 0 */
 167               	/* stack size = 1 */
 168               	.L__stack_usage = 1
 169 0002 C82F      		mov r28,r24
 134:./tmk_core/common/bootmagic.c ****     if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
 170               		.loc 1 134 0
 171 0004 8CE2      		ldi r24,lo8(44)
 172               	.LVL15:
 173 0006 0E94 0000 		call scan_keycode
 174               	.LVL16:
 175 000a 8823      		tst r24
 176 000c 01F0      		breq .L15
 135:./tmk_core/common/bootmagic.c **** 
 136:./tmk_core/common/bootmagic.c ****     return scan_keycode(keycode);
 177               		.loc 1 136 0
 178 000e 8C2F      		mov r24,r28
 179               	/* epilogue start */
 137:./tmk_core/common/bootmagic.c **** }
 180               		.loc 1 137 0
 181 0010 CF91      		pop r28
 182               	.LVL17:
 136:./tmk_core/common/bootmagic.c **** }
 183               		.loc 1 136 0
 184 0012 0C94 0000 		jmp scan_keycode
 185               	.LVL18:
 186               	.L15:
 187               		.loc 1 137 0
 188 0016 80E0      		ldi r24,0
 189               	/* epilogue start */
 190 0018 CF91      		pop r28
 191               	.LVL19:
 192 001a 0895      		ret
 193               		.cfi_endproc
 194               	.LFE105:
 196               		.section	.text.bootmagic,"ax",@progbits
 197               	.global	bootmagic
 199               	bootmagic:
 200               	.LFB103:
  20:./tmk_core/common/bootmagic.c ****     /* check signature */
 201               		.loc 1 20 0
 202               		.cfi_startproc
 203 0000 CF93      		push r28
 204               	.LCFI10:
 205               		.cfi_def_cfa_offset 3
 206               		.cfi_offset 28, -2
 207               	/* prologue: function */
 208               	/* frame size = 0 */
 209               	/* stack size = 1 */
 210               	.L__stack_usage = 1
  22:./tmk_core/common/bootmagic.c ****         eeconfig_init();
 211               		.loc 1 22 0
 212 0002 0E94 0000 		call eeconfig_is_enabled
 213               	.LVL20:
 214 0006 8111      		cpse r24,__zero_reg__
 215 0008 00C0      		rjmp .L17
  23:./tmk_core/common/bootmagic.c ****     }
 216               		.loc 1 23 0
 217 000a 0E94 0000 		call eeconfig_init
 218               	.LVL21:
 219               	.L17:
  20:./tmk_core/common/bootmagic.c ****     /* check signature */
 220               		.loc 1 20 0 discriminator 1
 221 000e C5E6      		ldi r28,lo8(101)
 222               	.L18:
 223               	.LVL22:
 224 0010 C150      		subi r28,lo8(-(-1))
 225               	.LVL23:
  29:./tmk_core/common/bootmagic.c ****     print("done.\n");
 226               		.loc 1 29 0 discriminator 1
 227 0012 01F0      		breq .L98
 228               	.LVL24:
  29:./tmk_core/common/bootmagic.c ****     print("done.\n");
 229               		.loc 1 29 0 is_stmt 0 discriminator 2
 230 0014 0E94 0000 		call matrix_scan
 231               	.LVL25:
 232               	.LBB8:
 233               	.LBB9:
 234               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 235               		.loc 2 163 0 is_stmt 1 discriminator 2
 236 0018 8FE3      		ldi r24,lo8(-25537)
 237 001a 9CE9      		ldi r25,hi8(-25537)
 238 001c 0197      	1:	sbiw r24,1
 239 001e 01F4      		brne 1b
 240 0020 00C0      		rjmp .
 241 0022 0000      		nop
 242 0024 00C0      		rjmp .L18
 243               	.LVL26:
 244               	.L98:
 245               	.LBE9:
 246               	.LBE8:
  33:./tmk_core/common/bootmagic.c ****         return;
 247               		.loc 1 33 0
 248 0026 89E2      		ldi r24,lo8(41)
 249 0028 0E94 0000 		call bootmagic_scan_keycode
 250               	.LVL27:
 251 002c 8111      		cpse r24,__zero_reg__
 252 002e 00C0      		rjmp .L16
  38:./tmk_core/common/bootmagic.c ****         eeconfig_init();
 253               		.loc 1 38 0
 254 0030 8AE2      		ldi r24,lo8(42)
 255 0032 0E94 0000 		call bootmagic_scan_keycode
 256               	.LVL28:
 257 0036 8111      		cpse r24,__zero_reg__
  39:./tmk_core/common/bootmagic.c ****     }
 258               		.loc 1 39 0
 259 0038 0E94 0000 		call eeconfig_init
 260               	.LVL29:
 261               	.L21:
  43:./tmk_core/common/bootmagic.c ****         bootloader_jump();
 262               		.loc 1 43 0
 263 003c 85E0      		ldi r24,lo8(5)
 264 003e 0E94 0000 		call bootmagic_scan_keycode
 265               	.LVL30:
 266 0042 8111      		cpse r24,__zero_reg__
  44:./tmk_core/common/bootmagic.c ****     }
 267               		.loc 1 44 0
 268 0044 0E94 0000 		call bootloader_jump
 269               	.LVL31:
 270               	.L22:
  48:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
 271               		.loc 1 48 0
 272 0048 0E94 0000 		call eeconfig_read_debug
 273               	.LVL32:
 274 004c 8093 0000 		sts debug_config,r24
  49:./tmk_core/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
 275               		.loc 1 49 0
 276 0050 87E0      		ldi r24,lo8(7)
 277 0052 0E94 0000 		call bootmagic_scan_keycode
 278               	.LVL33:
 279 0056 8823      		tst r24
 280 0058 01F0      		breq .L23
  50:./tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
 281               		.loc 1 50 0
 282 005a 8BE1      		ldi r24,lo8(27)
 283 005c 0E94 0000 		call bootmagic_scan_keycode
 284               	.LVL34:
 285 0060 8823      		tst r24
 286 0062 01F0      		breq .L24
  51:./tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
 287               		.loc 1 51 0
 288 0064 8091 0000 		lds r24,debug_config
 289 0068 81FB      		bst r24,1
 290 006a 2227      		clr r18
 291 006c 20F9      		bld r18,0
 292 006e 91E0      		ldi r25,lo8(1)
 293 0070 9227      		eor r25,r18
 294 0072 90FB      		bst r25,0
 295 0074 81F9      		bld r24,1
 296 0076 00C0      		rjmp .L95
 297               	.L24:
  52:./tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
 298               		.loc 1 52 0
 299 0078 8EE0      		ldi r24,lo8(14)
 300 007a 0E94 0000 		call bootmagic_scan_keycode
 301               	.LVL35:
 302 007e 8823      		tst r24
 303 0080 01F0      		breq .L25
  53:./tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 304               		.loc 1 53 0
 305 0082 8091 0000 		lds r24,debug_config
 306 0086 82FB      		bst r24,2
 307 0088 2227      		clr r18
 308 008a 20F9      		bld r18,0
 309 008c 91E0      		ldi r25,lo8(1)
 310 008e 9227      		eor r25,r18
 311 0090 90FB      		bst r25,0
 312 0092 82F9      		bld r24,2
 313               	.L95:
 314 0094 8093 0000 		sts debug_config,r24
 315 0098 00C0      		rjmp .L23
 316               	.L25:
  54:./tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
 317               		.loc 1 54 0
 318 009a 80E1      		ldi r24,lo8(16)
 319 009c 0E94 0000 		call bootmagic_scan_keycode
 320               	.LVL36:
 321 00a0 9091 0000 		lds r25,debug_config
 322 00a4 8823      		tst r24
 323 00a6 01F0      		breq .L26
  55:./tmk_core/common/bootmagic.c ****         } else {
 324               		.loc 1 55 0
 325 00a8 93FB      		bst r25,3
 326 00aa 2227      		clr r18
 327 00ac 20F9      		bld r18,0
 328 00ae 81E0      		ldi r24,lo8(1)
 329 00b0 8227      		eor r24,r18
 330 00b2 80FB      		bst r24,0
 331 00b4 93F9      		bld r25,3
 332 00b6 00C0      		rjmp .L96
 333               	.L26:
  57:./tmk_core/common/bootmagic.c ****         }
 334               		.loc 1 57 0
 335 00b8 892F      		mov r24,r25
 336 00ba 8095      		com r24
 337 00bc 80FB      		bst r24,0
 338 00be 90F9      		bld r25,0
 339               	.L96:
 340 00c0 9093 0000 		sts debug_config,r25
 341               	.L23:
  60:./tmk_core/common/bootmagic.c **** 
 342               		.loc 1 60 0
 343 00c4 8091 0000 		lds r24,debug_config
 344 00c8 0E94 0000 		call eeconfig_update_debug
 345               	.LVL37:
  63:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
 346               		.loc 1 63 0
 347 00cc 0E94 0000 		call eeconfig_read_keymap
 348               	.LVL38:
 349 00d0 90E0      		ldi r25,0
 350 00d2 9093 0000 		sts keymap_config+1,r25
 351 00d6 8093 0000 		sts keymap_config,r24
  64:./tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
 352               		.loc 1 64 0
 353 00da 80EE      		ldi r24,lo8(-32)
 354 00dc 0E94 0000 		call bootmagic_scan_keycode
 355               	.LVL39:
 356 00e0 8823      		tst r24
 357 00e2 01F0      		breq .L27
  65:./tmk_core/common/bootmagic.c ****     }
 358               		.loc 1 65 0
 359 00e4 8091 0000 		lds r24,keymap_config
 360 00e8 982F      		mov r25,r24
 361 00ea 9095      		com r25
 362 00ec 90FB      		bst r25,0
 363 00ee 80F9      		bld r24,0
 364 00f0 8093 0000 		sts keymap_config,r24
 365               	.L27:
  67:./tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
 366               		.loc 1 67 0
 367 00f4 89E3      		ldi r24,lo8(57)
 368 00f6 0E94 0000 		call bootmagic_scan_keycode
 369               	.LVL40:
 370 00fa 8823      		tst r24
 371 00fc 01F0      		breq .L28
  68:./tmk_core/common/bootmagic.c ****     }
 372               		.loc 1 68 0
 373 00fe 8091 0000 		lds r24,keymap_config
 374 0102 81FB      		bst r24,1
 375 0104 2227      		clr r18
 376 0106 20F9      		bld r18,0
 377 0108 91E0      		ldi r25,lo8(1)
 378 010a 9227      		eor r25,r18
 379 010c 90FB      		bst r25,0
 380 010e 81F9      		bld r24,1
 381 0110 8093 0000 		sts keymap_config,r24
 382               	.L28:
  70:./tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 383               		.loc 1 70 0
 384 0114 82EE      		ldi r24,lo8(-30)
 385 0116 0E94 0000 		call bootmagic_scan_keycode
 386               	.LVL41:
 387 011a 8823      		tst r24
 388 011c 01F0      		breq .L29
  71:./tmk_core/common/bootmagic.c ****     }
 389               		.loc 1 71 0
 390 011e 8091 0000 		lds r24,keymap_config
 391 0122 82FB      		bst r24,2
 392 0124 2227      		clr r18
 393 0126 20F9      		bld r18,0
 394 0128 91E0      		ldi r25,lo8(1)
 395 012a 9227      		eor r25,r18
 396 012c 90FB      		bst r25,0
 397 012e 82F9      		bld r24,2
 398 0130 8093 0000 		sts keymap_config,r24
 399               	.L29:
  73:./tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 400               		.loc 1 73 0
 401 0134 86EE      		ldi r24,lo8(-26)
 402 0136 0E94 0000 		call bootmagic_scan_keycode
 403               	.LVL42:
 404 013a 8823      		tst r24
 405 013c 01F0      		breq .L30
  74:./tmk_core/common/bootmagic.c ****     }
 406               		.loc 1 74 0
 407 013e 8091 0000 		lds r24,keymap_config
 408 0142 83FB      		bst r24,3
 409 0144 2227      		clr r18
 410 0146 20F9      		bld r18,0
 411 0148 91E0      		ldi r25,lo8(1)
 412 014a 9227      		eor r25,r18
 413 014c 90FB      		bst r25,0
 414 014e 83F9      		bld r24,3
 415 0150 8093 0000 		sts keymap_config,r24
 416               	.L30:
  76:./tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
 417               		.loc 1 76 0
 418 0154 83EE      		ldi r24,lo8(-29)
 419 0156 0E94 0000 		call bootmagic_scan_keycode
 420               	.LVL43:
 421 015a 8823      		tst r24
 422 015c 01F0      		breq .L31
  77:./tmk_core/common/bootmagic.c ****     }
 423               		.loc 1 77 0
 424 015e 8091 0000 		lds r24,keymap_config
 425 0162 84FB      		bst r24,4
 426 0164 2227      		clr r18
 427 0166 20F9      		bld r18,0
 428 0168 91E0      		ldi r25,lo8(1)
 429 016a 9227      		eor r25,r18
 430 016c 90FB      		bst r25,0
 431 016e 84F9      		bld r24,4
 432 0170 8093 0000 		sts keymap_config,r24
 433               	.L31:
  79:./tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
 434               		.loc 1 79 0
 435 0174 85E3      		ldi r24,lo8(53)
 436 0176 0E94 0000 		call bootmagic_scan_keycode
 437               	.LVL44:
 438 017a 8823      		tst r24
 439 017c 01F0      		breq .L32
  80:./tmk_core/common/bootmagic.c ****     }
 440               		.loc 1 80 0
 441 017e 8091 0000 		lds r24,keymap_config
 442 0182 85FB      		bst r24,5
 443 0184 2227      		clr r18
 444 0186 20F9      		bld r18,0
 445 0188 91E0      		ldi r25,lo8(1)
 446 018a 9227      		eor r25,r18
 447 018c 90FB      		bst r25,0
 448 018e 85F9      		bld r24,5
 449 0190 8093 0000 		sts keymap_config,r24
 450               	.L32:
  82:./tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
 451               		.loc 1 82 0
 452 0194 81E3      		ldi r24,lo8(49)
 453 0196 0E94 0000 		call bootmagic_scan_keycode
 454               	.LVL45:
 455 019a 8823      		tst r24
 456 019c 01F0      		breq .L33
  83:./tmk_core/common/bootmagic.c ****     }
 457               		.loc 1 83 0
 458 019e 8091 0000 		lds r24,keymap_config
 459 01a2 86FB      		bst r24,6
 460 01a4 2227      		clr r18
 461 01a6 20F9      		bld r18,0
 462 01a8 91E0      		ldi r25,lo8(1)
 463 01aa 9227      		eor r25,r18
 464 01ac 90FB      		bst r25,0
 465 01ae 86F9      		bld r24,6
 466 01b0 8093 0000 		sts keymap_config,r24
 467               	.L33:
  85:./tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
 468               		.loc 1 85 0
 469 01b4 81E1      		ldi r24,lo8(17)
 470 01b6 0E94 0000 		call bootmagic_scan_keycode
 471               	.LVL46:
 472 01ba 8823      		tst r24
 473 01bc 01F0      		breq .L34
  86:./tmk_core/common/bootmagic.c ****     }
 474               		.loc 1 86 0
 475 01be 8091 0000 		lds r24,keymap_config
 476 01c2 87FB      		bst r24,7
 477 01c4 2227      		clr r18
 478 01c6 20F9      		bld r18,0
 479 01c8 91E0      		ldi r25,lo8(1)
 480 01ca 9227      		eor r25,r18
 481 01cc 90FB      		bst r25,0
 482 01ce 87F9      		bld r24,7
 483 01d0 8093 0000 		sts keymap_config,r24
 484               	.L34:
  88:./tmk_core/common/bootmagic.c **** 
 485               		.loc 1 88 0
 486 01d4 8091 0000 		lds r24,keymap_config
 487 01d8 0E94 0000 		call eeconfig_update_keymap
 488               	.LVL47:
  92:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 489               		.loc 1 92 0
 490 01dc 87E2      		ldi r24,lo8(39)
 491 01de 0E94 0000 		call bootmagic_scan_keycode
 492               	.LVL48:
 493 01e2 C82F      		mov r28,r24
 494               	.LVL49:
  93:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 495               		.loc 1 93 0
 496 01e4 8EE1      		ldi r24,lo8(30)
 497               	.LVL50:
 498 01e6 0E94 0000 		call bootmagic_scan_keycode
 499               	.LVL51:
 500 01ea 8111      		cpse r24,__zero_reg__
  93:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 501               		.loc 1 93 0 is_stmt 0 discriminator 1
 502 01ec C260      		ori r28,lo8(2)
 503               	.LVL52:
 504               	.L35:
  94:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 505               		.loc 1 94 0 is_stmt 1
 506 01ee 8FE1      		ldi r24,lo8(31)
 507 01f0 0E94 0000 		call bootmagic_scan_keycode
 508               	.LVL53:
 509 01f4 8111      		cpse r24,__zero_reg__
  94:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 510               		.loc 1 94 0 is_stmt 0 discriminator 1
 511 01f6 C460      		ori r28,lo8(4)
 512               	.LVL54:
 513               	.L36:
  95:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 514               		.loc 1 95 0 is_stmt 1
 515 01f8 80E2      		ldi r24,lo8(32)
 516 01fa 0E94 0000 		call bootmagic_scan_keycode
 517               	.LVL55:
 518 01fe 8111      		cpse r24,__zero_reg__
  95:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 519               		.loc 1 95 0 is_stmt 0 discriminator 1
 520 0200 C860      		ori r28,lo8(8)
 521               	.LVL56:
 522               	.L37:
  96:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 523               		.loc 1 96 0 is_stmt 1
 524 0202 81E2      		ldi r24,lo8(33)
 525 0204 0E94 0000 		call bootmagic_scan_keycode
 526               	.LVL57:
 527 0208 8111      		cpse r24,__zero_reg__
  96:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 528               		.loc 1 96 0 is_stmt 0 discriminator 1
 529 020a C061      		ori r28,lo8(16)
 530               	.LVL58:
 531               	.L38:
  97:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 532               		.loc 1 97 0 is_stmt 1
 533 020c 82E2      		ldi r24,lo8(34)
 534 020e 0E94 0000 		call bootmagic_scan_keycode
 535               	.LVL59:
 536 0212 8111      		cpse r24,__zero_reg__
  97:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 537               		.loc 1 97 0 is_stmt 0 discriminator 1
 538 0214 C062      		ori r28,lo8(32)
 539               	.LVL60:
 540               	.L39:
  98:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 541               		.loc 1 98 0 is_stmt 1
 542 0216 83E2      		ldi r24,lo8(35)
 543 0218 0E94 0000 		call bootmagic_scan_keycode
 544               	.LVL61:
 545 021c 8111      		cpse r24,__zero_reg__
  98:./tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 546               		.loc 1 98 0 is_stmt 0 discriminator 1
 547 021e C064      		ori r28,lo8(64)
 548               	.LVL62:
 549               	.L40:
  99:./tmk_core/common/bootmagic.c ****     if (default_layer) {
 550               		.loc 1 99 0 is_stmt 1
 551 0220 84E2      		ldi r24,lo8(36)
 552 0222 0E94 0000 		call bootmagic_scan_keycode
 553               	.LVL63:
 554 0226 8823      		tst r24
 555 0228 01F0      		breq .L41
  99:./tmk_core/common/bootmagic.c ****     if (default_layer) {
 556               		.loc 1 99 0 is_stmt 0 discriminator 1
 557 022a C068      		ori r28,lo8(-128)
 558               	.LVL64:
 559 022c 00C0      		rjmp .L42
 560               	.L41:
 100:./tmk_core/common/bootmagic.c ****         eeconfig_update_default_layer(default_layer);
 561               		.loc 1 100 0 is_stmt 1
 562 022e CC23      		tst r28
 563 0230 01F0      		breq .L43
 564               	.L42:
 101:./tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 565               		.loc 1 101 0
 566 0232 8C2F      		mov r24,r28
 567 0234 0E94 0000 		call eeconfig_update_default_layer
 568               	.LVL65:
 102:./tmk_core/common/bootmagic.c ****     } else {
 569               		.loc 1 102 0
 570 0238 6C2F      		mov r22,r28
 571 023a 00C0      		rjmp .L97
 572               	.L43:
 104:./tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 573               		.loc 1 104 0
 574 023c 0E94 0000 		call eeconfig_read_default_layer
 575               	.LVL66:
 105:./tmk_core/common/bootmagic.c ****     }
 576               		.loc 1 105 0
 577 0240 682F      		mov r22,r24
 578               	.LVL67:
 579               	.L97:
 580 0242 70E0      		ldi r23,0
 581 0244 80E0      		ldi r24,0
 582 0246 90E0      		ldi r25,0
 583               	/* epilogue start */
 107:./tmk_core/common/bootmagic.c **** 
 584               		.loc 1 107 0
 585 0248 CF91      		pop r28
 105:./tmk_core/common/bootmagic.c ****     }
 586               		.loc 1 105 0
 587 024a 0C94 0000 		jmp default_layer_set
 588               	.LVL68:
 589               	.L16:
 590               	/* epilogue start */
 107:./tmk_core/common/bootmagic.c **** 
 591               		.loc 1 107 0
 592 024e CF91      		pop r28
 593               	.LVL69:
 594 0250 0895      		ret
 595               		.cfi_endproc
 596               	.LFE103:
 598               		.comm	keymap_config,2,1
 599               		.text
 600               	.Letext0:
 601               		.file 3 "/usr/lib/avr/include/stdint.h"
 602               		.file 4 "./tmk_core/common/matrix.h"
 603               		.file 5 "./tmk_core/common/debug.h"
 604               		.file 6 "./tmk_core/common/keyboard.h"
 605               		.file 7 "./quantum/keycode_config.h"
 606               		.file 8 "./lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 607               		.file 9 "./quantum/keymap.h"
 608               		.file 10 "./tmk_core/common/eeconfig.h"
 609               		.file 11 "./tmk_core/common/bootloader.h"
 610               		.file 12 "./tmk_core/common/keycode.h"
 611               		.file 13 "./tmk_core/common/action_layer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bootmagic.c
     /tmp/ccLRVjF6.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccLRVjF6.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccLRVjF6.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccLRVjF6.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccLRVjF6.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccLRVjF6.s:12     .text.scan_keycode:0000000000000000 scan_keycode
     /tmp/ccLRVjF6.s:156    .text.bootmagic_scan_keycode:0000000000000000 bootmagic_scan_keycode
     /tmp/ccLRVjF6.s:199    .text.bootmagic:0000000000000000 bootmagic
                            *COM*:0000000000000002 keymap_config

UNDEFINED SYMBOLS
matrix_get_row
keymap_key_to_keycode
eeconfig_is_enabled
eeconfig_init
matrix_scan
bootloader_jump
eeconfig_read_debug
debug_config
eeconfig_update_debug
eeconfig_read_keymap
eeconfig_update_keymap
eeconfig_update_default_layer
eeconfig_read_default_layer
default_layer_set
__do_clear_bss
