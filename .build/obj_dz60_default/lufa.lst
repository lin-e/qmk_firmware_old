   1               		.file	"lufa.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_leds,"ax",@progbits
  12               	keyboard_leds:
  13               	.LFB127:
  14               		.file 1 "./tmk_core/protocol/lufa/lufa.c"
   1:./tmk_core/protocol/lufa/lufa.c **** /*
   2:./tmk_core/protocol/lufa/lufa.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/protocol/lufa/lufa.c ****  * This file is based on:
   4:./tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:./tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:./tmk_core/protocol/lufa/lufa.c ****  */
   7:./tmk_core/protocol/lufa/lufa.c **** 
   8:./tmk_core/protocol/lufa/lufa.c **** /*
   9:./tmk_core/protocol/lufa/lufa.c ****              LUFA Library
  10:./tmk_core/protocol/lufa/lufa.c ****      Copyright (C) Dean Camera, 2012.
  11:./tmk_core/protocol/lufa/lufa.c **** 
  12:./tmk_core/protocol/lufa/lufa.c ****   dean [at] fourwalledcubicle [dot] com
  13:./tmk_core/protocol/lufa/lufa.c ****            www.lufa-lib.org
  14:./tmk_core/protocol/lufa/lufa.c **** */
  15:./tmk_core/protocol/lufa/lufa.c **** 
  16:./tmk_core/protocol/lufa/lufa.c **** /*
  17:./tmk_core/protocol/lufa/lufa.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:./tmk_core/protocol/lufa/lufa.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:./tmk_core/protocol/lufa/lufa.c **** 
  20:./tmk_core/protocol/lufa/lufa.c ****   Permission to use, copy, modify, distribute, and sell this
  21:./tmk_core/protocol/lufa/lufa.c ****   software and its documentation for any purpose is hereby granted
  22:./tmk_core/protocol/lufa/lufa.c ****   without fee, provided that the above copyright notice appear in
  23:./tmk_core/protocol/lufa/lufa.c ****   all copies and that both that the copyright notice and this
  24:./tmk_core/protocol/lufa/lufa.c ****   permission notice and warranty disclaimer appear in supporting
  25:./tmk_core/protocol/lufa/lufa.c ****   documentation, and that the name of the author not be used in
  26:./tmk_core/protocol/lufa/lufa.c ****   advertising or publicity pertaining to distribution of the
  27:./tmk_core/protocol/lufa/lufa.c ****   software without specific, written prior permission.
  28:./tmk_core/protocol/lufa/lufa.c **** 
  29:./tmk_core/protocol/lufa/lufa.c ****   The author disclaim all warranties with regard to this
  30:./tmk_core/protocol/lufa/lufa.c ****   software, including all implied warranties of merchantability
  31:./tmk_core/protocol/lufa/lufa.c ****   and fitness.  In no event shall the author be liable for any
  32:./tmk_core/protocol/lufa/lufa.c ****   special, indirect or consequential damages or any damages
  33:./tmk_core/protocol/lufa/lufa.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:./tmk_core/protocol/lufa/lufa.c ****   in an action of contract, negligence or other tortious action,
  35:./tmk_core/protocol/lufa/lufa.c ****   arising out of or in connection with the use or performance of
  36:./tmk_core/protocol/lufa/lufa.c ****   this software.
  37:./tmk_core/protocol/lufa/lufa.c **** */
  38:./tmk_core/protocol/lufa/lufa.c **** 
  39:./tmk_core/protocol/lufa/lufa.c **** #include "report.h"
  40:./tmk_core/protocol/lufa/lufa.c **** #include "host.h"
  41:./tmk_core/protocol/lufa/lufa.c **** #include "host_driver.h"
  42:./tmk_core/protocol/lufa/lufa.c **** #include "keyboard.h"
  43:./tmk_core/protocol/lufa/lufa.c **** #include "action.h"
  44:./tmk_core/protocol/lufa/lufa.c **** #include "led.h"
  45:./tmk_core/protocol/lufa/lufa.c **** #include "sendchar.h"
  46:./tmk_core/protocol/lufa/lufa.c **** #include "debug.h"
  47:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
  48:./tmk_core/protocol/lufa/lufa.c **** #include "sleep_led.h"
  49:./tmk_core/protocol/lufa/lufa.c **** #endif
  50:./tmk_core/protocol/lufa/lufa.c **** #include "suspend.h"
  51:./tmk_core/protocol/lufa/lufa.c **** 
  52:./tmk_core/protocol/lufa/lufa.c **** #include "usb_descriptor.h"
  53:./tmk_core/protocol/lufa/lufa.c **** #include "lufa.h"
  54:./tmk_core/protocol/lufa/lufa.c **** #include "quantum.h"
  55:./tmk_core/protocol/lufa/lufa.c **** #include <util/atomic.h>
  56:./tmk_core/protocol/lufa/lufa.c **** #include "outputselect.h"
  57:./tmk_core/protocol/lufa/lufa.c **** 
  58:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
  59:./tmk_core/protocol/lufa/lufa.c ****   #include "keycode_config.h"
  60:./tmk_core/protocol/lufa/lufa.c **** 
  61:./tmk_core/protocol/lufa/lufa.c ****   extern keymap_config_t keymap_config;
  62:./tmk_core/protocol/lufa/lufa.c **** #endif
  63:./tmk_core/protocol/lufa/lufa.c **** 
  64:./tmk_core/protocol/lufa/lufa.c **** 
  65:./tmk_core/protocol/lufa/lufa.c **** #ifdef AUDIO_ENABLE
  66:./tmk_core/protocol/lufa/lufa.c ****     #include <audio.h>
  67:./tmk_core/protocol/lufa/lufa.c **** #endif
  68:./tmk_core/protocol/lufa/lufa.c **** 
  69:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  70:./tmk_core/protocol/lufa/lufa.c ****   #ifdef MODULE_ADAFRUIT_BLE
  71:./tmk_core/protocol/lufa/lufa.c ****     #include "adafruit_ble.h"
  72:./tmk_core/protocol/lufa/lufa.c ****   #else
  73:./tmk_core/protocol/lufa/lufa.c ****     #include "bluetooth.h"
  74:./tmk_core/protocol/lufa/lufa.c ****   #endif
  75:./tmk_core/protocol/lufa/lufa.c **** #endif
  76:./tmk_core/protocol/lufa/lufa.c **** 
  77:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
  78:./tmk_core/protocol/lufa/lufa.c ****     #include "virtser.h"
  79:./tmk_core/protocol/lufa/lufa.c **** #endif
  80:./tmk_core/protocol/lufa/lufa.c **** 
  81:./tmk_core/protocol/lufa/lufa.c **** #if (defined(RGB_MIDI) | defined(RGBLIGHT_ANIMATIONS)) & defined(RGBLIGHT_ENABLE)
  82:./tmk_core/protocol/lufa/lufa.c ****     #include "rgblight.h"
  83:./tmk_core/protocol/lufa/lufa.c **** #endif
  84:./tmk_core/protocol/lufa/lufa.c **** 
  85:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  86:./tmk_core/protocol/lufa/lufa.c ****   #include "qmk_midi.h"
  87:./tmk_core/protocol/lufa/lufa.c **** #endif
  88:./tmk_core/protocol/lufa/lufa.c **** 
  89:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
  90:./tmk_core/protocol/lufa/lufa.c **** 	#include "raw_hid.h"
  91:./tmk_core/protocol/lufa/lufa.c **** #endif
  92:./tmk_core/protocol/lufa/lufa.c **** 
  93:./tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_idle = 0;
  94:./tmk_core/protocol/lufa/lufa.c **** /* 0: Boot Protocol, 1: Report Protocol(default) */
  95:./tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_protocol = 1;
  96:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_led_stats = 0;
  97:./tmk_core/protocol/lufa/lufa.c **** 
  98:./tmk_core/protocol/lufa/lufa.c **** static report_keyboard_t keyboard_report_sent;
  99:./tmk_core/protocol/lufa/lufa.c **** 
 100:./tmk_core/protocol/lufa/lufa.c **** /* Host driver */
 101:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void);
 102:./tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report);
 103:./tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report);
 104:./tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data);
 105:./tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data);
 106:./tmk_core/protocol/lufa/lufa.c **** host_driver_t lufa_driver = {
 107:./tmk_core/protocol/lufa/lufa.c ****     keyboard_leds,
 108:./tmk_core/protocol/lufa/lufa.c ****     send_keyboard,
 109:./tmk_core/protocol/lufa/lufa.c ****     send_mouse,
 110:./tmk_core/protocol/lufa/lufa.c ****     send_system,
 111:./tmk_core/protocol/lufa/lufa.c ****     send_consumer,
 112:./tmk_core/protocol/lufa/lufa.c **** };
 113:./tmk_core/protocol/lufa/lufa.c **** 
 114:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 115:./tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_CDC_Device_t cdc_device =
 116:./tmk_core/protocol/lufa/lufa.c **** {
 117:./tmk_core/protocol/lufa/lufa.c ****   .Config =
 118:./tmk_core/protocol/lufa/lufa.c ****   {
 119:./tmk_core/protocol/lufa/lufa.c ****     .ControlInterfaceNumber = CCI_INTERFACE,
 120:./tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint         =
 121:./tmk_core/protocol/lufa/lufa.c ****     {
 122:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_IN_EPADDR,
 123:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 124:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 125:./tmk_core/protocol/lufa/lufa.c ****     },
 126:./tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint	    =
 127:./tmk_core/protocol/lufa/lufa.c ****     {
 128:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_OUT_EPADDR,
 129:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 130:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 131:./tmk_core/protocol/lufa/lufa.c ****     },
 132:./tmk_core/protocol/lufa/lufa.c ****     .NotificationEndpoint   =
 133:./tmk_core/protocol/lufa/lufa.c ****     {
 134:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_NOTIFICATION_EPADDR,
 135:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_NOTIFICATION_EPSIZE,
 136:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 137:./tmk_core/protocol/lufa/lufa.c ****     },
 138:./tmk_core/protocol/lufa/lufa.c ****   },
 139:./tmk_core/protocol/lufa/lufa.c **** };
 140:./tmk_core/protocol/lufa/lufa.c **** #endif
 141:./tmk_core/protocol/lufa/lufa.c **** 
 142:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 143:./tmk_core/protocol/lufa/lufa.c **** 
 144:./tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Send
 145:./tmk_core/protocol/lufa/lufa.c ****  *
 146:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 147:./tmk_core/protocol/lufa/lufa.c ****  */
 148:./tmk_core/protocol/lufa/lufa.c **** void raw_hid_send( uint8_t *data, uint8_t length )
 149:./tmk_core/protocol/lufa/lufa.c **** {
 150:./tmk_core/protocol/lufa/lufa.c **** 	// TODO: implement variable size packet
 151:./tmk_core/protocol/lufa/lufa.c **** 	if ( length != RAW_EPSIZE )
 152:./tmk_core/protocol/lufa/lufa.c **** 	{
 153:./tmk_core/protocol/lufa/lufa.c **** 		return;
 154:./tmk_core/protocol/lufa/lufa.c **** 	}
 155:./tmk_core/protocol/lufa/lufa.c **** 
 156:./tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 157:./tmk_core/protocol/lufa/lufa.c **** 	{
 158:./tmk_core/protocol/lufa/lufa.c **** 		return;
 159:./tmk_core/protocol/lufa/lufa.c **** 	}
 160:./tmk_core/protocol/lufa/lufa.c **** 
 161:./tmk_core/protocol/lufa/lufa.c **** 	// TODO: decide if we allow calls to raw_hid_send() in the middle
 162:./tmk_core/protocol/lufa/lufa.c **** 	// of other endpoint usage.
 163:./tmk_core/protocol/lufa/lufa.c **** 	uint8_t ep = Endpoint_GetCurrentEndpoint();
 164:./tmk_core/protocol/lufa/lufa.c **** 
 165:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_IN_EPNUM);
 166:./tmk_core/protocol/lufa/lufa.c **** 
 167:./tmk_core/protocol/lufa/lufa.c **** 	// Check to see if the host is ready to accept another packet
 168:./tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsINReady())
 169:./tmk_core/protocol/lufa/lufa.c **** 	{
 170:./tmk_core/protocol/lufa/lufa.c **** 		// Write data
 171:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_Write_Stream_LE(data, RAW_EPSIZE, NULL);
 172:./tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to send the last packet
 173:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearIN();
 174:./tmk_core/protocol/lufa/lufa.c **** 	}
 175:./tmk_core/protocol/lufa/lufa.c **** 
 176:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(ep);
 177:./tmk_core/protocol/lufa/lufa.c **** }
 178:./tmk_core/protocol/lufa/lufa.c **** 
 179:./tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Receive
 180:./tmk_core/protocol/lufa/lufa.c ****  *
 181:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 182:./tmk_core/protocol/lufa/lufa.c ****  */
 183:./tmk_core/protocol/lufa/lufa.c **** __attribute__ ((weak))
 184:./tmk_core/protocol/lufa/lufa.c **** void raw_hid_receive( uint8_t *data, uint8_t length )
 185:./tmk_core/protocol/lufa/lufa.c **** {
 186:./tmk_core/protocol/lufa/lufa.c **** 	// Users should #include "raw_hid.h" in their own code
 187:./tmk_core/protocol/lufa/lufa.c **** 	// and implement this function there. Leave this as weak linkage
 188:./tmk_core/protocol/lufa/lufa.c **** 	// so users can opt to not handle data coming in.
 189:./tmk_core/protocol/lufa/lufa.c **** }
 190:./tmk_core/protocol/lufa/lufa.c **** 
 191:./tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Task
 192:./tmk_core/protocol/lufa/lufa.c ****  *
 193:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 194:./tmk_core/protocol/lufa/lufa.c ****  */
 195:./tmk_core/protocol/lufa/lufa.c **** static void raw_hid_task(void)
 196:./tmk_core/protocol/lufa/lufa.c **** {
 197:./tmk_core/protocol/lufa/lufa.c **** 	// Create a temporary buffer to hold the read in data from the host
 198:./tmk_core/protocol/lufa/lufa.c **** 	uint8_t data[RAW_EPSIZE];
 199:./tmk_core/protocol/lufa/lufa.c **** 	bool data_read = false;
 200:./tmk_core/protocol/lufa/lufa.c **** 
 201:./tmk_core/protocol/lufa/lufa.c **** 	// Device must be connected and configured for the task to run
 202:./tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 203:./tmk_core/protocol/lufa/lufa.c **** 	return;
 204:./tmk_core/protocol/lufa/lufa.c **** 
 205:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_OUT_EPNUM);
 206:./tmk_core/protocol/lufa/lufa.c **** 
 207:./tmk_core/protocol/lufa/lufa.c **** 	// Check to see if a packet has been sent from the host
 208:./tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsOUTReceived())
 209:./tmk_core/protocol/lufa/lufa.c **** 	{
 210:./tmk_core/protocol/lufa/lufa.c **** 		// Check to see if the packet contains data
 211:./tmk_core/protocol/lufa/lufa.c **** 		if (Endpoint_IsReadWriteAllowed())
 212:./tmk_core/protocol/lufa/lufa.c **** 		{
 213:./tmk_core/protocol/lufa/lufa.c **** 			/* Read data */
 214:./tmk_core/protocol/lufa/lufa.c **** 			Endpoint_Read_Stream_LE(data, sizeof(data), NULL);
 215:./tmk_core/protocol/lufa/lufa.c **** 			data_read = true;
 216:./tmk_core/protocol/lufa/lufa.c **** 		}
 217:./tmk_core/protocol/lufa/lufa.c **** 
 218:./tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to receive the last packet
 219:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearOUT();
 220:./tmk_core/protocol/lufa/lufa.c **** 
 221:./tmk_core/protocol/lufa/lufa.c **** 		if ( data_read )
 222:./tmk_core/protocol/lufa/lufa.c **** 		{
 223:./tmk_core/protocol/lufa/lufa.c **** 			raw_hid_receive( data, sizeof(data) );
 224:./tmk_core/protocol/lufa/lufa.c **** 		}
 225:./tmk_core/protocol/lufa/lufa.c **** 	}
 226:./tmk_core/protocol/lufa/lufa.c **** }
 227:./tmk_core/protocol/lufa/lufa.c **** #endif
 228:./tmk_core/protocol/lufa/lufa.c **** 
 229:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 230:./tmk_core/protocol/lufa/lufa.c ****  * Console
 231:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 232:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 233:./tmk_core/protocol/lufa/lufa.c **** /** \brief Console Task
 234:./tmk_core/protocol/lufa/lufa.c ****  *
 235:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 236:./tmk_core/protocol/lufa/lufa.c ****  */
 237:./tmk_core/protocol/lufa/lufa.c **** static void Console_Task(void)
 238:./tmk_core/protocol/lufa/lufa.c **** {
 239:./tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 240:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 241:./tmk_core/protocol/lufa/lufa.c ****         return;
 242:./tmk_core/protocol/lufa/lufa.c **** 
 243:./tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 244:./tmk_core/protocol/lufa/lufa.c **** 
 245:./tmk_core/protocol/lufa/lufa.c **** #if 0
 246:./tmk_core/protocol/lufa/lufa.c ****     // TODO: impl receivechar()/recvchar()
 247:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_OUT_EPNUM);
 248:./tmk_core/protocol/lufa/lufa.c **** 
 249:./tmk_core/protocol/lufa/lufa.c ****     /* Check to see if a packet has been sent from the host */
 250:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
 251:./tmk_core/protocol/lufa/lufa.c ****     {
 252:./tmk_core/protocol/lufa/lufa.c ****         /* Check to see if the packet contains data */
 253:./tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed())
 254:./tmk_core/protocol/lufa/lufa.c ****         {
 255:./tmk_core/protocol/lufa/lufa.c ****             /* Create a temporary buffer to hold the read in report from the host */
 256:./tmk_core/protocol/lufa/lufa.c ****             uint8_t ConsoleData[CONSOLE_EPSIZE];
 257:./tmk_core/protocol/lufa/lufa.c **** 
 258:./tmk_core/protocol/lufa/lufa.c ****             /* Read Console Report Data */
 259:./tmk_core/protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(&ConsoleData, sizeof(ConsoleData), NULL);
 260:./tmk_core/protocol/lufa/lufa.c **** 
 261:./tmk_core/protocol/lufa/lufa.c ****             /* Process Console Report Data */
 262:./tmk_core/protocol/lufa/lufa.c ****             //ProcessConsoleHIDReport(ConsoleData);
 263:./tmk_core/protocol/lufa/lufa.c ****         }
 264:./tmk_core/protocol/lufa/lufa.c **** 
 265:./tmk_core/protocol/lufa/lufa.c ****         /* Finalize the stream transfer to send the last packet */
 266:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 267:./tmk_core/protocol/lufa/lufa.c ****     }
 268:./tmk_core/protocol/lufa/lufa.c **** #endif
 269:./tmk_core/protocol/lufa/lufa.c **** 
 270:./tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 271:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 272:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 273:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 274:./tmk_core/protocol/lufa/lufa.c ****         return;
 275:./tmk_core/protocol/lufa/lufa.c ****     }
 276:./tmk_core/protocol/lufa/lufa.c **** 
 277:./tmk_core/protocol/lufa/lufa.c ****     // fill empty bank
 278:./tmk_core/protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed())
 279:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 280:./tmk_core/protocol/lufa/lufa.c **** 
 281:./tmk_core/protocol/lufa/lufa.c ****     // flash senchar packet
 282:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 283:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 284:./tmk_core/protocol/lufa/lufa.c ****     }
 285:./tmk_core/protocol/lufa/lufa.c **** 
 286:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 287:./tmk_core/protocol/lufa/lufa.c **** }
 288:./tmk_core/protocol/lufa/lufa.c **** #endif
 289:./tmk_core/protocol/lufa/lufa.c **** 
 290:./tmk_core/protocol/lufa/lufa.c **** 
 291:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 292:./tmk_core/protocol/lufa/lufa.c ****  * USB Events
 293:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 294:./tmk_core/protocol/lufa/lufa.c **** /*
 295:./tmk_core/protocol/lufa/lufa.c ****  * Event Order of Plug in:
 296:./tmk_core/protocol/lufa/lufa.c ****  * 0) EVENT_USB_Device_Connect
 297:./tmk_core/protocol/lufa/lufa.c ****  * 1) EVENT_USB_Device_Suspend
 298:./tmk_core/protocol/lufa/lufa.c ****  * 2) EVENT_USB_Device_Reset
 299:./tmk_core/protocol/lufa/lufa.c ****  * 3) EVENT_USB_Device_Wake
 300:./tmk_core/protocol/lufa/lufa.c **** */
 301:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 302:./tmk_core/protocol/lufa/lufa.c ****  *
 303:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 304:./tmk_core/protocol/lufa/lufa.c ****  */
 305:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Connect(void)
 306:./tmk_core/protocol/lufa/lufa.c **** {
 307:./tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 308:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 309:./tmk_core/protocol/lufa/lufa.c ****     if (!USB_IsInitialized) {
 310:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 311:./tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 312:./tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 313:./tmk_core/protocol/lufa/lufa.c ****     }
 314:./tmk_core/protocol/lufa/lufa.c **** }
 315:./tmk_core/protocol/lufa/lufa.c **** 
 316:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 317:./tmk_core/protocol/lufa/lufa.c ****  *
 318:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 319:./tmk_core/protocol/lufa/lufa.c ****  */
 320:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Disconnect(void)
 321:./tmk_core/protocol/lufa/lufa.c **** {
 322:./tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 323:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 324:./tmk_core/protocol/lufa/lufa.c ****     USB_IsInitialized = false;
 325:./tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 326:./tmk_core/protocol/lufa/lufa.c ****     if (USB_IsInitialized) {
 327:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();  // Disable all interrupts
 328:./tmk_core/protocol/lufa/lufa.c **** 	USB_Controller_Enable();
 329:./tmk_core/protocol/lufa/lufa.c ****         USB_INT_Enable(USB_INT_VBUSTI);
 330:./tmk_core/protocol/lufa/lufa.c ****     }
 331:./tmk_core/protocol/lufa/lufa.c **** */
 332:./tmk_core/protocol/lufa/lufa.c **** }
 333:./tmk_core/protocol/lufa/lufa.c **** 
 334:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 335:./tmk_core/protocol/lufa/lufa.c ****  *
 336:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 337:./tmk_core/protocol/lufa/lufa.c ****  */
 338:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Reset(void)
 339:./tmk_core/protocol/lufa/lufa.c **** {
 340:./tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 341:./tmk_core/protocol/lufa/lufa.c **** }
 342:./tmk_core/protocol/lufa/lufa.c **** 
 343:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 344:./tmk_core/protocol/lufa/lufa.c ****  *
 345:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 346:./tmk_core/protocol/lufa/lufa.c ****  */
 347:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Suspend()
 348:./tmk_core/protocol/lufa/lufa.c **** {
 349:./tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 350:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 351:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_enable();
 352:./tmk_core/protocol/lufa/lufa.c **** #endif
 353:./tmk_core/protocol/lufa/lufa.c **** }
 354:./tmk_core/protocol/lufa/lufa.c **** 
 355:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 356:./tmk_core/protocol/lufa/lufa.c ****  *
 357:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 358:./tmk_core/protocol/lufa/lufa.c ****  */
 359:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_WakeUp()
 360:./tmk_core/protocol/lufa/lufa.c **** {
 361:./tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 362:./tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 363:./tmk_core/protocol/lufa/lufa.c **** 
 364:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 365:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_disable();
 366:./tmk_core/protocol/lufa/lufa.c ****     // NOTE: converters may not accept this
 367:./tmk_core/protocol/lufa/lufa.c ****     led_set(host_keyboard_leds());
 368:./tmk_core/protocol/lufa/lufa.c **** #endif
 369:./tmk_core/protocol/lufa/lufa.c **** }
 370:./tmk_core/protocol/lufa/lufa.c **** 
 371:./tmk_core/protocol/lufa/lufa.c **** 
 372:./tmk_core/protocol/lufa/lufa.c **** 
 373:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 374:./tmk_core/protocol/lufa/lufa.c **** static bool console_flush = false;
 375:./tmk_core/protocol/lufa/lufa.c **** #define CONSOLE_FLUSH_SET(b)   do { \
 376:./tmk_core/protocol/lufa/lufa.c ****   ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {\
 377:./tmk_core/protocol/lufa/lufa.c ****     console_flush = b; \
 378:./tmk_core/protocol/lufa/lufa.c ****   } \
 379:./tmk_core/protocol/lufa/lufa.c **** } while (0)
 380:./tmk_core/protocol/lufa/lufa.c **** 
 381:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Start Of Frame
 382:./tmk_core/protocol/lufa/lufa.c ****  *
 383:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 384:./tmk_core/protocol/lufa/lufa.c ****  * called every 1ms
 385:./tmk_core/protocol/lufa/lufa.c ****  */
 386:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_StartOfFrame(void)
 387:./tmk_core/protocol/lufa/lufa.c **** {
 388:./tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 389:./tmk_core/protocol/lufa/lufa.c ****     if (++count % 50) return;
 390:./tmk_core/protocol/lufa/lufa.c ****     count = 0;
 391:./tmk_core/protocol/lufa/lufa.c **** 
 392:./tmk_core/protocol/lufa/lufa.c ****     if (!console_flush) return;
 393:./tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 394:./tmk_core/protocol/lufa/lufa.c ****     console_flush = false;
 395:./tmk_core/protocol/lufa/lufa.c **** }
 396:./tmk_core/protocol/lufa/lufa.c **** 
 397:./tmk_core/protocol/lufa/lufa.c **** #endif
 398:./tmk_core/protocol/lufa/lufa.c **** 
 399:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ConfigurationChanged event.
 400:./tmk_core/protocol/lufa/lufa.c ****  *
 401:./tmk_core/protocol/lufa/lufa.c ****  * This is fired when the host sets the current configuration of the USB device after enumeration.
 402:./tmk_core/protocol/lufa/lufa.c ****  *
 403:./tmk_core/protocol/lufa/lufa.c ****  * ATMega32u2 supports dual bank(ping-pong mode) only on endpoint 3 and 4,
 404:./tmk_core/protocol/lufa/lufa.c ****  * it is safe to use single bank for all endpoints.
 405:./tmk_core/protocol/lufa/lufa.c ****  */
 406:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 407:./tmk_core/protocol/lufa/lufa.c **** {
 408:./tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 409:./tmk_core/protocol/lufa/lufa.c **** 
 410:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Keyboard HID Report Endpoints */
 411:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 412:./tmk_core/protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 413:./tmk_core/protocol/lufa/lufa.c **** 
 414:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 415:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Mouse HID Report Endpoint */
 416:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 417:./tmk_core/protocol/lufa/lufa.c ****                                      MOUSE_EPSIZE, ENDPOINT_BANK_SINGLE);
 418:./tmk_core/protocol/lufa/lufa.c **** #endif
 419:./tmk_core/protocol/lufa/lufa.c **** 
 420:./tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 421:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Extra HID Report Endpoint */
 422:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(EXTRAKEY_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 423:./tmk_core/protocol/lufa/lufa.c ****                                      EXTRAKEY_EPSIZE, ENDPOINT_BANK_SINGLE);
 424:./tmk_core/protocol/lufa/lufa.c **** #endif
 425:./tmk_core/protocol/lufa/lufa.c **** 
 426:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 427:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Raw HID Report Endpoints */
 428:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 429:./tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 430:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 431:./tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 432:./tmk_core/protocol/lufa/lufa.c **** #endif
 433:./tmk_core/protocol/lufa/lufa.c **** 
 434:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 435:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Console HID Report Endpoints */
 436:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 437:./tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 438:./tmk_core/protocol/lufa/lufa.c **** #if 0
 439:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 440:./tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 441:./tmk_core/protocol/lufa/lufa.c **** #endif
 442:./tmk_core/protocol/lufa/lufa.c **** #endif
 443:./tmk_core/protocol/lufa/lufa.c **** 
 444:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 445:./tmk_core/protocol/lufa/lufa.c ****     /* Setup NKRO HID Report Endpoints */
 446:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 447:./tmk_core/protocol/lufa/lufa.c ****                                      NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
 448:./tmk_core/protocol/lufa/lufa.c **** #endif
 449:./tmk_core/protocol/lufa/lufa.c **** 
 450:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 451:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EP
 452:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_E
 453:./tmk_core/protocol/lufa/lufa.c **** #endif
 454:./tmk_core/protocol/lufa/lufa.c **** 
 455:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 456:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPADDR, EP_TYPE_INTERRUPT, CDC_NOT
 457:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_OUT_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_
 458:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_IN_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_B
 459:./tmk_core/protocol/lufa/lufa.c **** #endif
 460:./tmk_core/protocol/lufa/lufa.c **** }
 461:./tmk_core/protocol/lufa/lufa.c **** 
 462:./tmk_core/protocol/lufa/lufa.c **** /* FIXME: Expose this table in the docs somehow
 463:./tmk_core/protocol/lufa/lufa.c **** Appendix G: HID Request Support Requirements
 464:./tmk_core/protocol/lufa/lufa.c **** 
 465:./tmk_core/protocol/lufa/lufa.c **** The following table enumerates the requests that need to be supported by various types of HID class
 466:./tmk_core/protocol/lufa/lufa.c **** 
 467:./tmk_core/protocol/lufa/lufa.c **** Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 468:./tmk_core/protocol/lufa/lufa.c **** ------------------------------------------------------------------------------------------
 469:./tmk_core/protocol/lufa/lufa.c **** Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 470:./tmk_core/protocol/lufa/lufa.c **** Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 471:./tmk_core/protocol/lufa/lufa.c **** Boot Keyboard   Required    Optional    Required    Required    Required    Required
 472:./tmk_core/protocol/lufa/lufa.c **** Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 473:./tmk_core/protocol/lufa/lufa.c **** Other Device    Required    Optional    Optional    Optional    Optional    Optional
 474:./tmk_core/protocol/lufa/lufa.c **** */
 475:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ControlRequest event.
 476:./tmk_core/protocol/lufa/lufa.c ****  *
 477:./tmk_core/protocol/lufa/lufa.c ****  *  This is fired before passing along unhandled control requests to the library for processing int
 478:./tmk_core/protocol/lufa/lufa.c ****  */
 479:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ControlRequest(void)
 480:./tmk_core/protocol/lufa/lufa.c **** {
 481:./tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 482:./tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 483:./tmk_core/protocol/lufa/lufa.c **** 
 484:./tmk_core/protocol/lufa/lufa.c ****     /* Handle HID Class specific requests */
 485:./tmk_core/protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 486:./tmk_core/protocol/lufa/lufa.c ****     {
 487:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 488:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 489:./tmk_core/protocol/lufa/lufa.c ****             {
 490:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 491:./tmk_core/protocol/lufa/lufa.c **** 
 492:./tmk_core/protocol/lufa/lufa.c ****                 // Interface
 493:./tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 494:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 495:./tmk_core/protocol/lufa/lufa.c ****                     // TODO: test/check
 496:./tmk_core/protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 497:./tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 498:./tmk_core/protocol/lufa/lufa.c ****                     break;
 499:./tmk_core/protocol/lufa/lufa.c ****                 }
 500:./tmk_core/protocol/lufa/lufa.c **** 
 501:./tmk_core/protocol/lufa/lufa.c ****                 /* Write the report data to the control endpoint */
 502:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 503:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 504:./tmk_core/protocol/lufa/lufa.c ****             }
 505:./tmk_core/protocol/lufa/lufa.c **** 
 506:./tmk_core/protocol/lufa/lufa.c ****             break;
 507:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetReport:
 508:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 509:./tmk_core/protocol/lufa/lufa.c ****             {
 510:./tmk_core/protocol/lufa/lufa.c **** 
 511:./tmk_core/protocol/lufa/lufa.c ****                 // Interface
 512:./tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 513:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 514:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 515:./tmk_core/protocol/lufa/lufa.c ****                 case NKRO_INTERFACE:
 516:./tmk_core/protocol/lufa/lufa.c **** #endif
 517:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 518:./tmk_core/protocol/lufa/lufa.c **** 
 519:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 520:./tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 521:./tmk_core/protocol/lufa/lufa.c ****                           return;
 522:./tmk_core/protocol/lufa/lufa.c ****                     }
 523:./tmk_core/protocol/lufa/lufa.c ****                     keyboard_led_stats = Endpoint_Read_8();
 524:./tmk_core/protocol/lufa/lufa.c **** 
 525:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearOUT();
 526:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 527:./tmk_core/protocol/lufa/lufa.c ****                     break;
 528:./tmk_core/protocol/lufa/lufa.c ****                 }
 529:./tmk_core/protocol/lufa/lufa.c **** 
 530:./tmk_core/protocol/lufa/lufa.c ****             }
 531:./tmk_core/protocol/lufa/lufa.c **** 
 532:./tmk_core/protocol/lufa/lufa.c ****             break;
 533:./tmk_core/protocol/lufa/lufa.c **** 
 534:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetProtocol:
 535:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 536:./tmk_core/protocol/lufa/lufa.c ****             {
 537:./tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 538:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 539:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 540:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 541:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 542:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 543:./tmk_core/protocol/lufa/lufa.c ****                 }
 544:./tmk_core/protocol/lufa/lufa.c ****             }
 545:./tmk_core/protocol/lufa/lufa.c **** 
 546:./tmk_core/protocol/lufa/lufa.c ****             break;
 547:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetProtocol:
 548:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 549:./tmk_core/protocol/lufa/lufa.c ****             {
 550:./tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 551:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 552:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 553:./tmk_core/protocol/lufa/lufa.c **** 
 554:./tmk_core/protocol/lufa/lufa.c ****                     keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
 555:./tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 556:./tmk_core/protocol/lufa/lufa.c ****                 }
 557:./tmk_core/protocol/lufa/lufa.c ****             }
 558:./tmk_core/protocol/lufa/lufa.c **** 
 559:./tmk_core/protocol/lufa/lufa.c ****             break;
 560:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetIdle:
 561:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 562:./tmk_core/protocol/lufa/lufa.c ****             {
 563:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 564:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 565:./tmk_core/protocol/lufa/lufa.c **** 
 566:./tmk_core/protocol/lufa/lufa.c ****                 keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 567:./tmk_core/protocol/lufa/lufa.c ****             }
 568:./tmk_core/protocol/lufa/lufa.c **** 
 569:./tmk_core/protocol/lufa/lufa.c ****             break;
 570:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetIdle:
 571:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 572:./tmk_core/protocol/lufa/lufa.c ****             {
 573:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 574:./tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 575:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 576:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 577:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 578:./tmk_core/protocol/lufa/lufa.c ****             }
 579:./tmk_core/protocol/lufa/lufa.c **** 
 580:./tmk_core/protocol/lufa/lufa.c ****             break;
 581:./tmk_core/protocol/lufa/lufa.c ****     }
 582:./tmk_core/protocol/lufa/lufa.c **** 
 583:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 584:./tmk_core/protocol/lufa/lufa.c ****     CDC_Device_ProcessControlRequest(&cdc_device);
 585:./tmk_core/protocol/lufa/lufa.c **** #endif
 586:./tmk_core/protocol/lufa/lufa.c **** }
 587:./tmk_core/protocol/lufa/lufa.c **** 
 588:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 589:./tmk_core/protocol/lufa/lufa.c ****  * Host driver
 590:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 591:./tmk_core/protocol/lufa/lufa.c **** /** \brief Keyboard LEDs
 592:./tmk_core/protocol/lufa/lufa.c ****  *
 593:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 594:./tmk_core/protocol/lufa/lufa.c ****  */
 595:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void)
 596:./tmk_core/protocol/lufa/lufa.c **** {
  15               		.loc 1 596 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 597:./tmk_core/protocol/lufa/lufa.c ****     return keyboard_led_stats;
 598:./tmk_core/protocol/lufa/lufa.c **** }
  21               		.loc 1 598 0
  22 0000 8091 0000 		lds r24,keyboard_led_stats
  23 0004 0895      		ret
  24               		.cfi_endproc
  25               	.LFE127:
  27               		.section	.text.send_consumer,"ax",@progbits
  29               	send_consumer:
  30               	.LFB131:
 599:./tmk_core/protocol/lufa/lufa.c **** 
 600:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send Keyboard
 601:./tmk_core/protocol/lufa/lufa.c ****  *
 602:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 603:./tmk_core/protocol/lufa/lufa.c ****  */
 604:./tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report)
 605:./tmk_core/protocol/lufa/lufa.c **** {
 606:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 607:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 608:./tmk_core/protocol/lufa/lufa.c **** 
 609:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 610:./tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 611:./tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 612:./tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_keys(report->mods, report->keys, sizeof(report->keys));
 613:./tmk_core/protocol/lufa/lufa.c ****     #elif MODULE_RN42
 614:./tmk_core/protocol/lufa/lufa.c ****        bluefruit_serial_send(0xFD);
 615:./tmk_core/protocol/lufa/lufa.c ****        bluefruit_serial_send(0x09);
 616:./tmk_core/protocol/lufa/lufa.c ****        bluefruit_serial_send(0x01);
 617:./tmk_core/protocol/lufa/lufa.c ****        for (uint8_t i = 0; i < KEYBOARD_EPSIZE; i++) {
 618:./tmk_core/protocol/lufa/lufa.c ****          bluefruit_serial_send(report->raw[i]);
 619:./tmk_core/protocol/lufa/lufa.c ****        }
 620:./tmk_core/protocol/lufa/lufa.c ****     #else
 621:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 622:./tmk_core/protocol/lufa/lufa.c ****       for (uint8_t i = 0; i < KEYBOARD_EPSIZE; i++) {
 623:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->raw[i]);
 624:./tmk_core/protocol/lufa/lufa.c ****       }
 625:./tmk_core/protocol/lufa/lufa.c ****     #endif
 626:./tmk_core/protocol/lufa/lufa.c ****   }
 627:./tmk_core/protocol/lufa/lufa.c **** #endif
 628:./tmk_core/protocol/lufa/lufa.c **** 
 629:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 630:./tmk_core/protocol/lufa/lufa.c ****       return;
 631:./tmk_core/protocol/lufa/lufa.c ****     }
 632:./tmk_core/protocol/lufa/lufa.c **** 
 633:./tmk_core/protocol/lufa/lufa.c ****     /* Select the Keyboard Report Endpoint */
 634:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 635:./tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keymap_config.nkro) {
 636:./tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 637:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(NKRO_IN_EPNUM);
 638:./tmk_core/protocol/lufa/lufa.c **** 
 639:./tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 1ms */
 640:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
 641:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 642:./tmk_core/protocol/lufa/lufa.c **** 
 643:./tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 644:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
 645:./tmk_core/protocol/lufa/lufa.c ****     }
 646:./tmk_core/protocol/lufa/lufa.c ****     else
 647:./tmk_core/protocol/lufa/lufa.c **** #endif
 648:./tmk_core/protocol/lufa/lufa.c ****     {
 649:./tmk_core/protocol/lufa/lufa.c ****         /* Boot protocol */
 650:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);
 651:./tmk_core/protocol/lufa/lufa.c **** 
 652:./tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 10ms */
 653:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 654:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 655:./tmk_core/protocol/lufa/lufa.c **** 
 656:./tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 657:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
 658:./tmk_core/protocol/lufa/lufa.c ****     }
 659:./tmk_core/protocol/lufa/lufa.c **** 
 660:./tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 661:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 662:./tmk_core/protocol/lufa/lufa.c **** 
 663:./tmk_core/protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 664:./tmk_core/protocol/lufa/lufa.c **** }
 665:./tmk_core/protocol/lufa/lufa.c ****  
 666:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send Mouse
 667:./tmk_core/protocol/lufa/lufa.c ****  *
 668:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 669:./tmk_core/protocol/lufa/lufa.c ****  */
 670:./tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report)
 671:./tmk_core/protocol/lufa/lufa.c **** {
 672:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 673:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 674:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 675:./tmk_core/protocol/lufa/lufa.c **** 
 676:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 677:./tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 678:./tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 679:./tmk_core/protocol/lufa/lufa.c ****       // FIXME: mouse buttons
 680:./tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_mouse_move(report->x, report->y, report->v, report->h, report->buttons);
 681:./tmk_core/protocol/lufa/lufa.c ****     #else
 682:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 683:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 684:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x03);
 685:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->buttons);
 686:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->x);
 687:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->y);
 688:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->v); // should try sending the wheel v here
 689:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->h); // should try sending the wheel h here
 690:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 691:./tmk_core/protocol/lufa/lufa.c ****     #endif
 692:./tmk_core/protocol/lufa/lufa.c ****   }
 693:./tmk_core/protocol/lufa/lufa.c **** #endif
 694:./tmk_core/protocol/lufa/lufa.c **** 
 695:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 696:./tmk_core/protocol/lufa/lufa.c ****       return;
 697:./tmk_core/protocol/lufa/lufa.c ****     }
 698:./tmk_core/protocol/lufa/lufa.c **** 
 699:./tmk_core/protocol/lufa/lufa.c ****     /* Select the Mouse Report Endpoint */
 700:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);
 701:./tmk_core/protocol/lufa/lufa.c **** 
 702:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 703:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 704:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 705:./tmk_core/protocol/lufa/lufa.c **** 
 706:./tmk_core/protocol/lufa/lufa.c ****     /* Write Mouse Report Data */
 707:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 708:./tmk_core/protocol/lufa/lufa.c **** 
 709:./tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 710:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 711:./tmk_core/protocol/lufa/lufa.c **** #endif
 712:./tmk_core/protocol/lufa/lufa.c **** }
 713:./tmk_core/protocol/lufa/lufa.c **** 
 714:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send System
 715:./tmk_core/protocol/lufa/lufa.c ****  *
 716:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 717:./tmk_core/protocol/lufa/lufa.c ****  */
 718:./tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data)
 719:./tmk_core/protocol/lufa/lufa.c **** {
 720:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 721:./tmk_core/protocol/lufa/lufa.c **** 
 722:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 723:./tmk_core/protocol/lufa/lufa.c ****         return;
 724:./tmk_core/protocol/lufa/lufa.c **** 
 725:./tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 726:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 727:./tmk_core/protocol/lufa/lufa.c ****         .usage = data - SYSTEM_POWER_DOWN + 1
 728:./tmk_core/protocol/lufa/lufa.c ****     };
 729:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 730:./tmk_core/protocol/lufa/lufa.c **** 
 731:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 732:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 733:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 734:./tmk_core/protocol/lufa/lufa.c **** 
 735:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 736:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 737:./tmk_core/protocol/lufa/lufa.c **** }
 738:./tmk_core/protocol/lufa/lufa.c **** 
 739:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send Consumer
 740:./tmk_core/protocol/lufa/lufa.c ****  *
 741:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 742:./tmk_core/protocol/lufa/lufa.c ****  */
 743:./tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data)
 744:./tmk_core/protocol/lufa/lufa.c **** {
  31               		.loc 1 744 0
  32               		.cfi_startproc
  33               	.LVL0:
  34 0000 0F93      		push r16
  35               	.LCFI0:
  36               		.cfi_def_cfa_offset 3
  37               		.cfi_offset 16, -2
  38 0002 1F93      		push r17
  39               	.LCFI1:
  40               		.cfi_def_cfa_offset 4
  41               		.cfi_offset 17, -3
  42 0004 CF93      		push r28
  43               	.LCFI2:
  44               		.cfi_def_cfa_offset 5
  45               		.cfi_offset 28, -4
  46 0006 DF93      		push r29
  47               	.LCFI3:
  48               		.cfi_def_cfa_offset 6
  49               		.cfi_offset 29, -5
  50 0008 00D0      		rcall .
  51 000a 1F92      		push __zero_reg__
  52               	.LCFI4:
  53               		.cfi_def_cfa_offset 9
  54 000c CDB7      		in r28,__SP_L__
  55 000e DEB7      		in r29,__SP_H__
  56               	.LCFI5:
  57               		.cfi_def_cfa_register 28
  58               	/* prologue: function */
  59               	/* frame size = 3 */
  60               	/* stack size = 7 */
  61               	.L__stack_usage = 7
  62 0010 8C01      		movw r16,r24
  63               	.LVL1:
 745:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 746:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
  64               		.loc 1 746 0
  65 0012 0E94 0000 		call where_to_send
  66               	.LVL2:
 747:./tmk_core/protocol/lufa/lufa.c **** 
 748:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 749:./tmk_core/protocol/lufa/lufa.c ****     if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 750:./tmk_core/protocol/lufa/lufa.c ****       #ifdef MODULE_ADAFRUIT_BLE
 751:./tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_send_consumer_key(data, 0);
 752:./tmk_core/protocol/lufa/lufa.c ****       #elif MODULE_RN42
 753:./tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 754:./tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 755:./tmk_core/protocol/lufa/lufa.c ****         last_data = data;
 756:./tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2RN42(data);
 757:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 758:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 759:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 760:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap&0xFF);
 761:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap>>8)&0xFF);
 762:./tmk_core/protocol/lufa/lufa.c ****       #else
 763:./tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 764:./tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 765:./tmk_core/protocol/lufa/lufa.c ****         last_data = data;
 766:./tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2BLUEFRUIT(data);
 767:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 768:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 769:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x02);
 770:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap>>8)&0xFF);
 771:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap&0xFF);
 772:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 773:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 774:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 775:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 776:./tmk_core/protocol/lufa/lufa.c ****       #endif
 777:./tmk_core/protocol/lufa/lufa.c ****     }
 778:./tmk_core/protocol/lufa/lufa.c **** #endif
 779:./tmk_core/protocol/lufa/lufa.c **** 
 780:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
  67               		.loc 1 780 0
  68 0016 8230      		cpi r24,lo8(2)
  69 0018 01F0      		breq .L3
  70               		.loc 1 780 0 is_stmt 0 discriminator 1
  71 001a 8430      		cpi r24,lo8(4)
  72 001c 01F4      		brne .L2
  73               	.L3:
 781:./tmk_core/protocol/lufa/lufa.c ****       return;
 782:./tmk_core/protocol/lufa/lufa.c ****     }
 783:./tmk_core/protocol/lufa/lufa.c **** 
 784:./tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
  74               		.loc 1 784 0 is_stmt 1
  75 001e 93E0      		ldi r25,lo8(3)
  76 0020 9983      		std Y+1,r25
  77 0022 1B83      		std Y+3,r17
  78 0024 0A83      		std Y+2,r16
  79               	.LVL3:
  80               	.LBB113:
  81               	.LBB114:
  82               		.file 2 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaims all warranties with regard to this
  22:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
  93:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
  94:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
  95:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
  96:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
  97:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  98:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  99:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 100:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 101:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 102:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 103:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 104:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 105:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 106:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 107:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 108:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 109:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 110:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 111:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 112:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 113:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 114:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 115:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 116:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 117:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 119:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 120:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 121:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 122:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 123:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 124:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 125:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 126:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 127:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 128:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 129:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 130:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 131:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 */
 132:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        7
 133:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 134:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        5
 135:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 136:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 137:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 138:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 139:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 140:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 141:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 142:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 143:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 144:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 145:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 146:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 147:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 148:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 149:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 150:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 151:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 152:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 153:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 154:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 155:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 156:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 157:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 158:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 159:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 160:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 161:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 162:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 163:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 164:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 165:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint address with the given endpoint type, bank size and number
 166:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  banks. Once configured, the endpoint may be read from or written to, depending on its direct
 167:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 168:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address    Endpoint address to configure.
 169:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 170:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 171:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 172:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 173:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 174:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 175:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 176:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 177:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 178:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured.
 179:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 180:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \attention When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> 
 181:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *             ascending order, or bank corruption will occur.
 182:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 184:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        refer to the chosen microcontroller model's datasheet to determine the maximum bank si
 185:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 186:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 187:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 188:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 189:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 190:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 191:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 192:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 193:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 194:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 195:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 196:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 197:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 198:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 199:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 200:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 201:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 202:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 203:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 204:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 205:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 206:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 207:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 208:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 209:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 211:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 212:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoi
 213:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 215:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 216:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 217:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 218:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 219:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 220:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 221:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 222:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 223:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 224:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 225:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 226:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 227:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 228:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 229:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 230:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 231:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 232:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 233:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 234:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 236:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 237:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 238:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 239:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 241:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 242:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 243:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 244:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint so that it can be restored after another endpoint has been
 245:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  manipulated.
 246:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 247:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 248:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 249:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 250:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 251:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 252:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 253:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 254:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 255:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 256:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 257:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 258:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 259:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint address.
 260:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 261:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint address to be indicated will opera
 262:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 263:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address Endpoint address to select.
 265:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 266:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 267:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
 268:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 269:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  83               		.loc 2 270 0
  84 0026 9093 E900 		sts 233,r25
  85               	.LVL4:
  86 002a 8FEF      		ldi r24,lo8(-1)
  87               	.LVL5:
  88               	.L5:
  89               	.LBE114:
  90               	.LBE113:
  91               	.LBB115:
  92               	.LBB116:
 271:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 272:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 273:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 274:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 275:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 276:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 277:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
 278:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 279:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 280:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
 281:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 282:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 283:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 284:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 285:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 286:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 287:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 288:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 290:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 291:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 292:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 293:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 294:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 295:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 296:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 297:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 298:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 299:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 300:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 301:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 302:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 303:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 304:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 306:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 307:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 308:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 309:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 310:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 311:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 312:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 313:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 314:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 315:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 316:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 317:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgment via the
 318:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 319:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 320:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 321:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 322:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 323:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 324:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 325:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 326:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 328:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 330:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 331:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 332:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 333:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 334:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 335:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 336:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 337:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 338:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 339:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 340:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 341:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 342:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 343:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 344:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 347:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 348:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 349:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 350:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 351:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 352:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 353:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 354:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 355:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 356:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 357:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 358:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 359:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
  93               		.loc 2 360 0
  94 002c 9091 E800 		lds r25,232
  95 0030 8150      		subi r24,lo8(-(-1))
  96               	.LVL6:
  97               	.LBE116:
  98               	.LBE115:
 785:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 786:./tmk_core/protocol/lufa/lufa.c ****         .usage = data
 787:./tmk_core/protocol/lufa/lufa.c ****     };
 788:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 789:./tmk_core/protocol/lufa/lufa.c **** 
 790:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 791:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
  99               		.loc 1 791 0
 100 0032 95FD      		sbrc r25,5
 101 0034 00C0      		rjmp .L6
 102               	.LVL7:
 103               	.LBB117:
 104               	.LBB118:
 105               		.file 3 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 164:/usr/lib/avr/include/util/delay.h **** 
 165:/usr/lib/avr/include/util/delay.h **** #else
 166:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 167:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/lib/avr/include/util/delay.h **** 	{
 172:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/lib/avr/include/util/delay.h **** 		{
 176:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 179:/usr/lib/avr/include/util/delay.h **** 		}
 180:/usr/lib/avr/include/util/delay.h **** 		return;
 181:/usr/lib/avr/include/util/delay.h **** 	}
 182:/usr/lib/avr/include/util/delay.h **** 	else
 183:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/lib/avr/include/util/delay.h **** #endif
 186:/usr/lib/avr/include/util/delay.h **** }
 187:/usr/lib/avr/include/util/delay.h **** 
 188:/usr/lib/avr/include/util/delay.h **** /**
 189:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/lib/avr/include/util/delay.h **** 
 191:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/lib/avr/include/util/delay.h **** 
 193:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/lib/avr/include/util/delay.h **** 
 196:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/lib/avr/include/util/delay.h **** 
 198:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/lib/avr/include/util/delay.h **** 
 202:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/lib/avr/include/util/delay.h ****   
 207:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/lib/avr/include/util/delay.h **** 
 211:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/lib/avr/include/util/delay.h ****  
 214:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****  */
 223:/usr/lib/avr/include/util/delay.h **** void
 224:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/lib/avr/include/util/delay.h **** {
 226:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 227:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 228:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 229:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 230:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 231:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 232:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 233:/usr/lib/avr/include/util/delay.h **** 
 234:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 235:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 236:/usr/lib/avr/include/util/delay.h **** 
 237:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 238:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 239:/usr/lib/avr/include/util/delay.h **** 
 240:/usr/lib/avr/include/util/delay.h **** 	#else
 241:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 242:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 243:/usr/lib/avr/include/util/delay.h **** 	#endif
 244:/usr/lib/avr/include/util/delay.h **** 
 245:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 106               		.loc 3 245 0
 107 0036 95ED      		ldi r25,lo8(-43)
 108 0038 9A95      	1:	dec r25
 109 003a 01F4      		brne 1b
 110 003c 0000      		nop
 111               	.LVL8:
 112               	.LBE118:
 113               	.LBE117:
 114               		.loc 1 791 0
 115 003e 8111      		cpse r24,__zero_reg__
 116 0040 00C0      		rjmp .L5
 117               	.LVL9:
 118               	.L6:
 119               	.LBB119:
 120               	.LBB120:
 121               		.loc 2 360 0
 122 0042 8091 E800 		lds r24,232
 123               	.LBE120:
 124               	.LBE119:
 792:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 125               		.loc 1 792 0
 126 0046 85FF      		sbrs r24,5
 127 0048 00C0      		rjmp .L2
 793:./tmk_core/protocol/lufa/lufa.c **** 
 794:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 128               		.loc 1 794 0
 129 004a 40E0      		ldi r20,0
 130 004c 50E0      		ldi r21,0
 131 004e 63E0      		ldi r22,lo8(3)
 132 0050 70E0      		ldi r23,0
 133 0052 CE01      		movw r24,r28
 134 0054 0196      		adiw r24,1
 135 0056 0E94 0000 		call Endpoint_Write_Stream_LE
 136               	.LVL10:
 137               	.LBB121:
 138               	.LBB122:
 361:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 362:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 363:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 364:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 365:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 366:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 367:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 368:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 369:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 370:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 371:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 372:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 373:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 374:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 375:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 376:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 377:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 378:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 379:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 380:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 381:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 382:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 383:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 384:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 385:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 386:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 387:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 388:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Address of the endpoint whose interrupt flag should be tested.
 389:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 390:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 391:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 392:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address) ATTR_WARN_UNUSED_RESUL
 393:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address)
 394:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 395:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << (Address & ENDPOINT_EPNUM_MASK))) ? true : fa
 396:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 397:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 398:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 399:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 400:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 401:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 402:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 403:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 404:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 405:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 406:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 408:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 411:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 415:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 416:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 417:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 418:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 419:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 420:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 421:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 422:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 423:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 424:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 425:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 426:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 427:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 428:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 429:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 430:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 431:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 432:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 433:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 434:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 435:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 436:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 438:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 439:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 440:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 441:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 442:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 443:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 445:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 446:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 447:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 448:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 449:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 451:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 453:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 454:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 139               		.loc 2 456 0
 140 005a 8091 E800 		lds r24,232
 141 005e 8E77      		andi r24,lo8(126)
 142 0060 8093 E800 		sts 232,r24
 143               	.LVL11:
 144               	.L2:
 145               	/* epilogue start */
 146               	.LBE122:
 147               	.LBE121:
 795:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 796:./tmk_core/protocol/lufa/lufa.c **** }
 148               		.loc 1 796 0
 149 0064 0F90      		pop __tmp_reg__
 150 0066 0F90      		pop __tmp_reg__
 151 0068 0F90      		pop __tmp_reg__
 152 006a DF91      		pop r29
 153 006c CF91      		pop r28
 154 006e 1F91      		pop r17
 155 0070 0F91      		pop r16
 156               	.LVL12:
 157 0072 0895      		ret
 158               		.cfi_endproc
 159               	.LFE131:
 161               		.section	.text.send_system,"ax",@progbits
 163               	send_system:
 164               	.LFB130:
 719:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 165               		.loc 1 719 0
 166               		.cfi_startproc
 167               	.LVL13:
 168 0000 CF93      		push r28
 169               	.LCFI6:
 170               		.cfi_def_cfa_offset 3
 171               		.cfi_offset 28, -2
 172 0002 DF93      		push r29
 173               	.LCFI7:
 174               		.cfi_def_cfa_offset 4
 175               		.cfi_offset 29, -3
 176 0004 00D0      		rcall .
 177 0006 1F92      		push __zero_reg__
 178               	.LCFI8:
 179               		.cfi_def_cfa_offset 7
 180 0008 CDB7      		in r28,__SP_L__
 181 000a DEB7      		in r29,__SP_H__
 182               	.LCFI9:
 183               		.cfi_def_cfa_register 28
 184               	/* prologue: function */
 185               	/* frame size = 3 */
 186               	/* stack size = 5 */
 187               	.L__stack_usage = 5
 188               	.LVL14:
 722:./tmk_core/protocol/lufa/lufa.c ****         return;
 189               		.loc 1 722 0
 190 000c 2091 0000 		lds r18,USB_DeviceState
 191 0010 2430      		cpi r18,lo8(4)
 192 0012 01F4      		brne .L19
 725:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 193               		.loc 1 725 0
 194 0014 22E0      		ldi r18,lo8(2)
 195 0016 2983      		std Y+1,r18
 727:./tmk_core/protocol/lufa/lufa.c ****     };
 196               		.loc 1 727 0
 197 0018 8058      		subi r24,-128
 198 001a 9109      		sbc r25,__zero_reg__
 199               	.LVL15:
 725:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 200               		.loc 1 725 0
 201 001c 9B83      		std Y+3,r25
 202 001e 8A83      		std Y+2,r24
 203               	.LVL16:
 204               	.LBB123:
 205               	.LBB124:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 206               		.loc 2 270 0
 207 0020 83E0      		ldi r24,lo8(3)
 208               	.LVL17:
 209 0022 8093 E900 		sts 233,r24
 210               	.LVL18:
 211 0026 8FEF      		ldi r24,lo8(-1)
 212               	.LVL19:
 213               	.L21:
 214               	.LBE124:
 215               	.LBE123:
 216               	.LBB125:
 217               	.LBB126:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 218               		.loc 2 360 0
 219 0028 9091 E800 		lds r25,232
 220 002c 8150      		subi r24,lo8(-(-1))
 221               	.LVL20:
 222               	.LBE126:
 223               	.LBE125:
 732:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 224               		.loc 1 732 0
 225 002e 95FD      		sbrc r25,5
 226 0030 00C0      		rjmp .L22
 227               	.LVL21:
 228               	.LBB127:
 229               	.LBB128:
 230               		.loc 3 245 0
 231 0032 95ED      		ldi r25,lo8(-43)
 232 0034 9A95      	1:	dec r25
 233 0036 01F4      		brne 1b
 234 0038 0000      		nop
 235               	.LVL22:
 236               	.LBE128:
 237               	.LBE127:
 732:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 238               		.loc 1 732 0
 239 003a 8111      		cpse r24,__zero_reg__
 240 003c 00C0      		rjmp .L21
 241               	.LVL23:
 242               	.L22:
 243               	.LBB129:
 244               	.LBB130:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 245               		.loc 2 360 0
 246 003e 8091 E800 		lds r24,232
 247               	.LBE130:
 248               	.LBE129:
 733:./tmk_core/protocol/lufa/lufa.c **** 
 249               		.loc 1 733 0
 250 0042 85FF      		sbrs r24,5
 251 0044 00C0      		rjmp .L19
 735:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 252               		.loc 1 735 0
 253 0046 40E0      		ldi r20,0
 254 0048 50E0      		ldi r21,0
 255 004a 63E0      		ldi r22,lo8(3)
 256 004c 70E0      		ldi r23,0
 257 004e CE01      		movw r24,r28
 258 0050 0196      		adiw r24,1
 259 0052 0E94 0000 		call Endpoint_Write_Stream_LE
 260               	.LVL24:
 261               	.LBB131:
 262               	.LBB132:
 263               		.loc 2 456 0
 264 0056 8091 E800 		lds r24,232
 265 005a 8E77      		andi r24,lo8(126)
 266 005c 8093 E800 		sts 232,r24
 267               	.LVL25:
 268               	.L19:
 269               	/* epilogue start */
 270               	.LBE132:
 271               	.LBE131:
 737:./tmk_core/protocol/lufa/lufa.c **** 
 272               		.loc 1 737 0
 273 0060 0F90      		pop __tmp_reg__
 274 0062 0F90      		pop __tmp_reg__
 275 0064 0F90      		pop __tmp_reg__
 276 0066 DF91      		pop r29
 277 0068 CF91      		pop r28
 278 006a 0895      		ret
 279               		.cfi_endproc
 280               	.LFE130:
 282               		.section	.text.send_mouse,"ax",@progbits
 284               	send_mouse:
 285               	.LFB129:
 671:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 286               		.loc 1 671 0
 287               		.cfi_startproc
 288               	.LVL26:
 289 0000 CF93      		push r28
 290               	.LCFI10:
 291               		.cfi_def_cfa_offset 3
 292               		.cfi_offset 28, -2
 293 0002 DF93      		push r29
 294               	.LCFI11:
 295               		.cfi_def_cfa_offset 4
 296               		.cfi_offset 29, -3
 297               	/* prologue: function */
 298               	/* frame size = 0 */
 299               	/* stack size = 2 */
 300               	.L__stack_usage = 2
 301 0004 EC01      		movw r28,r24
 302               	.LVL27:
 674:./tmk_core/protocol/lufa/lufa.c **** 
 303               		.loc 1 674 0
 304 0006 0E94 0000 		call where_to_send
 305               	.LVL28:
 695:./tmk_core/protocol/lufa/lufa.c ****       return;
 306               		.loc 1 695 0
 307 000a 8230      		cpi r24,lo8(2)
 308 000c 01F0      		breq .L32
 695:./tmk_core/protocol/lufa/lufa.c ****       return;
 309               		.loc 1 695 0 is_stmt 0 discriminator 1
 310 000e 8430      		cpi r24,lo8(4)
 311 0010 01F4      		brne .L31
 312               	.L32:
 313               	.LVL29:
 314               	.LBB133:
 315               	.LBB134:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 316               		.loc 2 270 0 is_stmt 1
 317 0012 82E0      		ldi r24,lo8(2)
 318               	.LVL30:
 319 0014 8093 E900 		sts 233,r24
 320               	.LVL31:
 321 0018 9FEF      		ldi r25,lo8(-1)
 322               	.LVL32:
 323               	.L34:
 324               	.LBE134:
 325               	.LBE133:
 326               	.LBB135:
 327               	.LBB136:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 328               		.loc 2 360 0
 329 001a 8091 E800 		lds r24,232
 330 001e 9150      		subi r25,lo8(-(-1))
 331               	.LVL33:
 332               	.LBE136:
 333               	.LBE135:
 703:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 334               		.loc 1 703 0
 335 0020 85FD      		sbrc r24,5
 336 0022 00C0      		rjmp .L35
 337               	.LVL34:
 338               	.LBB137:
 339               	.LBB138:
 340               		.loc 3 245 0
 341 0024 85ED      		ldi r24,lo8(-43)
 342 0026 8A95      	1:	dec r24
 343 0028 01F4      		brne 1b
 344 002a 0000      		nop
 345               	.LVL35:
 346               	.LBE138:
 347               	.LBE137:
 703:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 348               		.loc 1 703 0
 349 002c 9111      		cpse r25,__zero_reg__
 350 002e 00C0      		rjmp .L34
 351               	.LVL36:
 352               	.L35:
 353               	.LBB139:
 354               	.LBB140:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 355               		.loc 2 360 0
 356 0030 8091 E800 		lds r24,232
 357               	.LBE140:
 358               	.LBE139:
 704:./tmk_core/protocol/lufa/lufa.c **** 
 359               		.loc 1 704 0
 360 0034 85FF      		sbrs r24,5
 361 0036 00C0      		rjmp .L31
 707:./tmk_core/protocol/lufa/lufa.c **** 
 362               		.loc 1 707 0
 363 0038 40E0      		ldi r20,0
 364 003a 50E0      		ldi r21,0
 365 003c 65E0      		ldi r22,lo8(5)
 366 003e 70E0      		ldi r23,0
 367 0040 CE01      		movw r24,r28
 368 0042 0E94 0000 		call Endpoint_Write_Stream_LE
 369               	.LVL37:
 370               	.LBB141:
 371               	.LBB142:
 372               		.loc 2 456 0
 373 0046 8091 E800 		lds r24,232
 374 004a 8E77      		andi r24,lo8(126)
 375 004c 8093 E800 		sts 232,r24
 376               	.LVL38:
 377               	.L31:
 378               	/* epilogue start */
 379               	.LBE142:
 380               	.LBE141:
 712:./tmk_core/protocol/lufa/lufa.c **** 
 381               		.loc 1 712 0
 382 0050 DF91      		pop r29
 383 0052 CF91      		pop r28
 384               	.LVL39:
 385 0054 0895      		ret
 386               		.cfi_endproc
 387               	.LFE129:
 389               		.section	.text.send_keyboard,"ax",@progbits
 391               	send_keyboard:
 392               	.LFB128:
 605:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 393               		.loc 1 605 0
 394               		.cfi_startproc
 395               	.LVL40:
 396 0000 CF93      		push r28
 397               	.LCFI12:
 398               		.cfi_def_cfa_offset 3
 399               		.cfi_offset 28, -2
 400 0002 DF93      		push r29
 401               	.LCFI13:
 402               		.cfi_def_cfa_offset 4
 403               		.cfi_offset 29, -3
 404               	/* prologue: function */
 405               	/* frame size = 0 */
 406               	/* stack size = 2 */
 407               	.L__stack_usage = 2
 408 0004 EC01      		movw r28,r24
 409               	.LVL41:
 607:./tmk_core/protocol/lufa/lufa.c **** 
 410               		.loc 1 607 0
 411 0006 0E94 0000 		call where_to_send
 412               	.LVL42:
 629:./tmk_core/protocol/lufa/lufa.c ****       return;
 413               		.loc 1 629 0
 414 000a 8230      		cpi r24,lo8(2)
 415 000c 01F0      		breq .L51
 629:./tmk_core/protocol/lufa/lufa.c ****       return;
 416               		.loc 1 629 0 is_stmt 0 discriminator 1
 417 000e 8430      		cpi r24,lo8(4)
 418 0010 01F0      		breq .+2
 419 0012 00C0      		rjmp .L50
 420               	.L51:
 635:./tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 421               		.loc 1 635 0 is_stmt 1
 422 0014 8091 0000 		lds r24,keyboard_protocol
 423               	.LVL43:
 424 0018 8823      		tst r24
 425 001a 01F0      		breq .L53
 635:./tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 426               		.loc 1 635 0 is_stmt 0 discriminator 1
 427 001c 8091 0000 		lds r24,keymap_config
 428 0020 87FF      		sbrs r24,7
 429 0022 00C0      		rjmp .L53
 430               	.LVL44:
 431               	.LBB143:
 432               	.LBB144:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 433               		.loc 2 270 0 is_stmt 1
 434 0024 84E0      		ldi r24,lo8(4)
 435 0026 8093 E900 		sts 233,r24
 436               	.LVL45:
 437 002a 8FEF      		ldi r24,lo8(-1)
 438               	.LVL46:
 439               	.L54:
 440               	.LBE144:
 441               	.LBE143:
 442               	.LBB145:
 443               	.LBB146:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 444               		.loc 2 360 0
 445 002c 9091 E800 		lds r25,232
 446 0030 8150      		subi r24,lo8(-(-1))
 447               	.LVL47:
 448               	.LBE146:
 449               	.LBE145:
 640:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 450               		.loc 1 640 0
 451 0032 95FD      		sbrc r25,5
 452 0034 00C0      		rjmp .L55
 453               	.LVL48:
 454               	.LBB147:
 455               	.LBB148:
 456               		.loc 3 245 0
 457 0036 95E1      		ldi r25,lo8(21)
 458 0038 9A95      	1:	dec r25
 459 003a 01F4      		brne 1b
 460 003c 0000      		nop
 461               	.LVL49:
 462               	.LBE148:
 463               	.LBE147:
 640:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 464               		.loc 1 640 0
 465 003e 8111      		cpse r24,__zero_reg__
 466 0040 00C0      		rjmp .L54
 467               	.LVL50:
 468               	.L55:
 469               	.LBB149:
 470               	.LBB150:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 471               		.loc 2 360 0
 472 0042 8091 E800 		lds r24,232
 473               	.LBE150:
 474               	.LBE149:
 641:./tmk_core/protocol/lufa/lufa.c **** 
 475               		.loc 1 641 0
 476 0046 85FF      		sbrs r24,5
 477 0048 00C0      		rjmp .L50
 644:./tmk_core/protocol/lufa/lufa.c ****     }
 478               		.loc 1 644 0
 479 004a 40E0      		ldi r20,0
 480 004c 50E0      		ldi r21,0
 481 004e 60E2      		ldi r22,lo8(32)
 482 0050 70E0      		ldi r23,0
 483 0052 00C0      		rjmp .L86
 484               	.LVL51:
 485               	.L53:
 486               	.LBB151:
 487               	.LBB152:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 488               		.loc 2 270 0
 489 0054 81E0      		ldi r24,lo8(1)
 490 0056 8093 E900 		sts 233,r24
 491               	.LVL52:
 492 005a 8FEF      		ldi r24,lo8(-1)
 493               	.LVL53:
 494               	.L59:
 495               	.LBE152:
 496               	.LBE151:
 497               	.LBB153:
 498               	.LBB154:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 499               		.loc 2 360 0
 500 005c 9091 E800 		lds r25,232
 501 0060 8150      		subi r24,lo8(-(-1))
 502               	.LVL54:
 503               	.LBE154:
 504               	.LBE153:
 653:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 505               		.loc 1 653 0
 506 0062 95FD      		sbrc r25,5
 507 0064 00C0      		rjmp .L60
 508               	.LVL55:
 509               	.LBB155:
 510               	.LBB156:
 511               		.loc 3 245 0
 512 0066 95ED      		ldi r25,lo8(-43)
 513 0068 9A95      	1:	dec r25
 514 006a 01F4      		brne 1b
 515 006c 0000      		nop
 516               	.LVL56:
 517               	.LBE156:
 518               	.LBE155:
 653:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 519               		.loc 1 653 0
 520 006e 8111      		cpse r24,__zero_reg__
 521 0070 00C0      		rjmp .L59
 522               	.LVL57:
 523               	.L60:
 524               	.LBB157:
 525               	.LBB158:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 526               		.loc 2 360 0
 527 0072 8091 E800 		lds r24,232
 528               	.LBE158:
 529               	.LBE157:
 654:./tmk_core/protocol/lufa/lufa.c **** 
 530               		.loc 1 654 0
 531 0076 85FF      		sbrs r24,5
 532 0078 00C0      		rjmp .L50
 657:./tmk_core/protocol/lufa/lufa.c ****     }
 533               		.loc 1 657 0
 534 007a 40E0      		ldi r20,0
 535 007c 50E0      		ldi r21,0
 536 007e 68E0      		ldi r22,lo8(8)
 537 0080 70E0      		ldi r23,0
 538               	.LVL58:
 539               	.L86:
 540 0082 CE01      		movw r24,r28
 541 0084 0E94 0000 		call Endpoint_Write_Stream_LE
 542               	.LVL59:
 543               	.LBB159:
 544               	.LBB160:
 545               		.loc 2 456 0
 546 0088 8091 E800 		lds r24,232
 547 008c 8E77      		andi r24,lo8(126)
 548 008e 8093 E800 		sts 232,r24
 549               	.LBE160:
 550               	.LBE159:
 663:./tmk_core/protocol/lufa/lufa.c **** }
 551               		.loc 1 663 0
 552 0092 80E2      		ldi r24,lo8(32)
 553 0094 FE01      		movw r30,r28
 554 0096 A0E0      		ldi r26,lo8(keyboard_report_sent)
 555 0098 B0E0      		ldi r27,hi8(keyboard_report_sent)
 556               		0:
 557 009a 0190      		ld r0,Z+
 558 009c 0D92      		st X+,r0
 559 009e 8A95      		dec r24
 560 00a0 01F4      		brne 0b
 561               	.L50:
 562               	/* epilogue start */
 664:./tmk_core/protocol/lufa/lufa.c ****  
 563               		.loc 1 664 0
 564 00a2 DF91      		pop r29
 565 00a4 CF91      		pop r28
 566               	.LVL60:
 567 00a6 0895      		ret
 568               		.cfi_endproc
 569               	.LFE128:
 571               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 572               	.global	EVENT_USB_Device_Connect
 574               	EVENT_USB_Device_Connect:
 575               	.LFB120:
 306:./tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 576               		.loc 1 306 0
 577               		.cfi_startproc
 578               	/* prologue: function */
 579               	/* frame size = 0 */
 580               	/* stack size = 0 */
 581               	.L__stack_usage = 0
 309:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 582               		.loc 1 309 0
 583 0000 8091 0000 		lds r24,USB_IsInitialized
 584 0004 8111      		cpse r24,__zero_reg__
 585 0006 00C0      		rjmp .L87
 310:./tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 586               		.loc 1 310 0
 587 0008 0E94 0000 		call USB_Disable
 588               	.LVL61:
 311:./tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 589               		.loc 1 311 0
 590 000c 0E94 0000 		call USB_Init
 591               	.LVL62:
 592               	.LBB161:
 593               	.LBB162:
 594               	.LBB163:
 595               		.file 4 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h"
   1:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaims all warranties with regard to this
  22:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
  89:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
  91:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
 596               		.loc 4 113 0
 597 0010 8091 E200 		lds r24,226
 598 0014 8460      		ori r24,lo8(4)
 599 0016 8093 E200 		sts 226,r24
 600               	.LVL63:
 601               	.L87:
 602 001a 0895      		ret
 603               	.LBE163:
 604               	.LBE162:
 605               	.LBE161:
 606               		.cfi_endproc
 607               	.LFE120:
 609               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 610               	.global	EVENT_USB_Device_Disconnect
 612               	EVENT_USB_Device_Disconnect:
 613               	.LFB121:
 321:./tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 614               		.loc 1 321 0
 615               		.cfi_startproc
 616               	/* prologue: function */
 617               	/* frame size = 0 */
 618               	/* stack size = 0 */
 619               	.L__stack_usage = 0
 324:./tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 620               		.loc 1 324 0
 621 0000 1092 0000 		sts USB_IsInitialized,__zero_reg__
 622 0004 0895      		ret
 623               		.cfi_endproc
 624               	.LFE121:
 626               		.section	.text.EVENT_USB_Device_Reset,"ax",@progbits
 627               	.global	EVENT_USB_Device_Reset
 629               	EVENT_USB_Device_Reset:
 630               	.LFB122:
 339:./tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 631               		.loc 1 339 0
 632               		.cfi_startproc
 633               	/* prologue: function */
 634               	/* frame size = 0 */
 635               	/* stack size = 0 */
 636               	.L__stack_usage = 0
 637 0000 0895      		ret
 638               		.cfi_endproc
 639               	.LFE122:
 641               		.section	.text.EVENT_USB_Device_Suspend,"ax",@progbits
 642               	.global	EVENT_USB_Device_Suspend
 644               	EVENT_USB_Device_Suspend:
 645               	.LFB123:
 348:./tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 646               		.loc 1 348 0
 647               		.cfi_startproc
 648               	/* prologue: function */
 649               	/* frame size = 0 */
 650               	/* stack size = 0 */
 651               	.L__stack_usage = 0
 652 0000 0895      		ret
 653               		.cfi_endproc
 654               	.LFE123:
 656               		.section	.text.EVENT_USB_Device_WakeUp,"ax",@progbits
 657               	.global	EVENT_USB_Device_WakeUp
 659               	EVENT_USB_Device_WakeUp:
 660               	.LFB124:
 360:./tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 661               		.loc 1 360 0
 662               		.cfi_startproc
 663               	/* prologue: function */
 664               	/* frame size = 0 */
 665               	/* stack size = 0 */
 666               	.L__stack_usage = 0
 362:./tmk_core/protocol/lufa/lufa.c **** 
 667               		.loc 1 362 0
 668 0000 0C94 0000 		jmp suspend_wakeup_init
 669               	.LVL64:
 670               		.cfi_endproc
 671               	.LFE124:
 673               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 674               	.global	EVENT_USB_Device_ConfigurationChanged
 676               	EVENT_USB_Device_ConfigurationChanged:
 677               	.LFB125:
 407:./tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 678               		.loc 1 407 0
 679               		.cfi_startproc
 680               	/* prologue: function */
 681               	/* frame size = 0 */
 682               	/* stack size = 0 */
 683               	.L__stack_usage = 0
 684               	.LVL65:
 685               	.LBB164:
 686               	.LBB165:
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 687               		.loc 2 210 0
 688 0000 42E0      		ldi r20,lo8(2)
 689 0002 61EC      		ldi r22,lo8(-63)
 690 0004 81E0      		ldi r24,lo8(1)
 691 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 692               	.LVL66:
 693               	.LBE165:
 694               	.LBE164:
 695               	.LBB166:
 696               	.LBB167:
 697 000a 42E0      		ldi r20,lo8(2)
 698 000c 61EC      		ldi r22,lo8(-63)
 699 000e 82E0      		ldi r24,lo8(2)
 700 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 701               	.LVL67:
 702               	.LBE167:
 703               	.LBE166:
 704               	.LBB168:
 705               	.LBB169:
 706 0014 42E0      		ldi r20,lo8(2)
 707 0016 61EC      		ldi r22,lo8(-63)
 708 0018 83E0      		ldi r24,lo8(3)
 709 001a 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 710               	.LVL68:
 711               	.LBE169:
 712               	.LBE168:
 713               	.LBB170:
 714               	.LBB171:
 715 001e 42E2      		ldi r20,lo8(34)
 716 0020 61EC      		ldi r22,lo8(-63)
 717 0022 84E0      		ldi r24,lo8(4)
 718 0024 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 719               	.LVL69:
 720               	.LBE171:
 721               	.LBE170:
 722               		.cfi_endproc
 723               	.LFE125:
 725               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 726               	.global	EVENT_USB_Device_ControlRequest
 728               	EVENT_USB_Device_ControlRequest:
 729               	.LFB126:
 480:./tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 730               		.loc 1 480 0
 731               		.cfi_startproc
 732               	/* prologue: function */
 733               	/* frame size = 0 */
 734               	/* stack size = 0 */
 735               	.L__stack_usage = 0
 736               	.LVL70:
 485:./tmk_core/protocol/lufa/lufa.c ****     {
 737               		.loc 1 485 0
 738 0000 8091 0000 		lds r24,USB_ControlRequest+1
 739 0004 8330      		cpi r24,lo8(3)
 740 0006 01F4      		brne .+2
 741 0008 00C0      		rjmp .L96
 742 000a 00F4      		brsh .L97
 743 000c 8130      		cpi r24,lo8(1)
 744 000e 01F0      		breq .L98
 745 0010 8230      		cpi r24,lo8(2)
 746 0012 01F4      		brne .+2
 747 0014 00C0      		rjmp .L99
 748 0016 0895      		ret
 749               	.L97:
 750 0018 8A30      		cpi r24,lo8(10)
 751 001a 01F4      		brne .+2
 752 001c 00C0      		rjmp .L100
 753 001e 8B30      		cpi r24,lo8(11)
 754 0020 01F4      		brne .+2
 755 0022 00C0      		rjmp .L101
 756 0024 8930      		cpi r24,lo8(9)
 757 0026 01F0      		breq .+2
 758 0028 00C0      		rjmp .L94
 759 002a 00C0      		rjmp .L129
 760               	.L98:
 488:./tmk_core/protocol/lufa/lufa.c ****             {
 761               		.loc 1 488 0
 762 002c 8091 0000 		lds r24,USB_ControlRequest
 763 0030 813A      		cpi r24,lo8(-95)
 764 0032 01F0      		breq .+2
 765 0034 00C0      		rjmp .L94
 766               	.LBB172:
 767               	.LBB173:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 768               		.loc 2 444 0
 769 0036 8091 E800 		lds r24,232
 770 003a 877F      		andi r24,lo8(-9)
 771 003c 8093 E800 		sts 232,r24
 772               	.LBE173:
 773               	.LBE172:
 493:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 774               		.loc 1 493 0
 775 0040 8091 0000 		lds r24,USB_ControlRequest+4
 776 0044 9091 0000 		lds r25,USB_ControlRequest+4+1
 777 0048 892B      		or r24,r25
 778 004a 01F4      		brne .L126
 497:./tmk_core/protocol/lufa/lufa.c ****                     break;
 779               		.loc 1 497 0
 780 004c 60E2      		ldi r22,lo8(32)
 496:./tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 781               		.loc 1 496 0
 782 004e 80E0      		ldi r24,lo8(keyboard_report_sent)
 783 0050 90E0      		ldi r25,hi8(keyboard_report_sent)
 784 0052 00C0      		rjmp .L104
 785               	.L126:
 482:./tmk_core/protocol/lufa/lufa.c **** 
 786               		.loc 1 482 0
 787 0054 60E0      		ldi r22,0
 481:./tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 788               		.loc 1 481 0
 789 0056 80E0      		ldi r24,0
 790 0058 90E0      		ldi r25,0
 791               	.L104:
 792               	.LVL71:
 502:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 793               		.loc 1 502 0
 794 005a 70E0      		ldi r23,0
 795 005c 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 796               	.LVL72:
 797               	.LBB174:
 798               	.LBB175:
 457:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 458:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 459:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 460:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 463:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 464:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 465:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 466:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 467:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 468:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 469:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 470:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 471:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 799               		.loc 2 471 0
 800 0060 8091 E800 		lds r24,232
 801 0064 8B77      		andi r24,lo8(123)
 802 0066 8093 E800 		sts 232,r24
 803 006a 0895      		ret
 804               	.LVL73:
 805               	.L129:
 806               	.LBE175:
 807               	.LBE174:
 508:./tmk_core/protocol/lufa/lufa.c ****             {
 808               		.loc 1 508 0
 809 006c 8091 0000 		lds r24,USB_ControlRequest
 810 0070 8132      		cpi r24,lo8(33)
 811 0072 01F0      		breq .+2
 812 0074 00C0      		rjmp .L94
 512:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 813               		.loc 1 512 0
 814 0076 8091 0000 		lds r24,USB_ControlRequest+4
 815 007a 9091 0000 		lds r25,USB_ControlRequest+4+1
 816 007e 0097      		sbiw r24,0
 817 0080 01F0      		breq .L107
 818 0082 0397      		sbiw r24,3
 819 0084 01F0      		breq .+2
 820 0086 00C0      		rjmp .L94
 821               	.L107:
 822               	.LBB176:
 823               	.LBB177:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 824               		.loc 2 444 0
 825 0088 8091 E800 		lds r24,232
 826 008c 877F      		andi r24,lo8(-9)
 827 008e 8093 E800 		sts 232,r24
 828               	.L108:
 829               	.LBE177:
 830               	.LBE176:
 831               	.LBB178:
 832               	.LBB179:
 419:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 833               		.loc 2 419 0
 834 0092 8091 E800 		lds r24,232
 835               	.LBE179:
 836               	.LBE178:
 519:./tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 837               		.loc 1 519 0
 838 0096 82FD      		sbrc r24,2
 839 0098 00C0      		rjmp .L130
 520:./tmk_core/protocol/lufa/lufa.c ****                           return;
 840               		.loc 1 520 0
 841 009a 8091 0000 		lds r24,USB_DeviceState
 842 009e 8111      		cpse r24,__zero_reg__
 843 00a0 00C0      		rjmp .L108
 844 00a2 00C0      		rjmp .L94
 845               	.L130:
 846               	.LBB180:
 847               	.LBB181:
 472:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 474:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 475:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 476:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 477:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 478:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 479:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 480:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 481:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 482:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 483:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 484:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 485:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 487:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 489:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 490:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 492:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 495:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 496:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 497:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 498:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 499:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 500:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 501:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 502:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 503:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 504:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, \c false otherwise.
 505:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 506:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 507:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 508:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 509:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 510:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 511:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 512:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 513:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 514:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 516:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 517:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 518:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 519:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 521:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 523:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 524:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 526:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 528:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 529:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 531:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 532:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 533:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 534:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 535:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 536:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 537:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 538:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 539:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 540:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 541:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 542:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 848               		.loc 2 542 0
 849 00a4 8091 F100 		lds r24,241
 850               	.LBE181:
 851               	.LBE180:
 523:./tmk_core/protocol/lufa/lufa.c **** 
 852               		.loc 1 523 0
 853 00a8 8093 0000 		sts keyboard_led_stats,r24
 854               	.LBB182:
 855               	.LBB183:
 471:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 856               		.loc 2 471 0
 857 00ac 8091 E800 		lds r24,232
 858 00b0 8B77      		andi r24,lo8(123)
 859 00b2 00C0      		rjmp .L127
 860               	.L96:
 861               	.LBE183:
 862               	.LBE182:
 535:./tmk_core/protocol/lufa/lufa.c ****             {
 863               		.loc 1 535 0
 864 00b4 8091 0000 		lds r24,USB_ControlRequest
 865 00b8 813A      		cpi r24,lo8(-95)
 866 00ba 01F0      		breq .+2
 867 00bc 00C0      		rjmp .L94
 537:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 868               		.loc 1 537 0
 869 00be 8091 0000 		lds r24,USB_ControlRequest+4
 870 00c2 9091 0000 		lds r25,USB_ControlRequest+4+1
 871 00c6 892B      		or r24,r25
 872 00c8 01F0      		breq .+2
 873 00ca 00C0      		rjmp .L94
 874               	.LBB184:
 875               	.LBB185:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 876               		.loc 2 444 0
 877 00cc 8091 E800 		lds r24,232
 878 00d0 877F      		andi r24,lo8(-9)
 879 00d2 8093 E800 		sts 232,r24
 880               	.L110:
 881               	.LBE185:
 882               	.LBE184:
 883               	.LBB186:
 884               	.LBB187:
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 885               		.loc 2 407 0 discriminator 1
 886 00d6 8091 E800 		lds r24,232
 887               	.LBE187:
 888               	.LBE186:
 539:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 889               		.loc 1 539 0 discriminator 1
 890 00da 80FF      		sbrs r24,0
 891 00dc 00C0      		rjmp .L110
 540:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 892               		.loc 1 540 0
 893 00de 8091 0000 		lds r24,keyboard_protocol
 894               	.LVL74:
 895 00e2 00C0      		rjmp .L128
 896               	.LVL75:
 897               	.L101:
 548:./tmk_core/protocol/lufa/lufa.c ****             {
 898               		.loc 1 548 0
 899 00e4 8091 0000 		lds r24,USB_ControlRequest
 900 00e8 8132      		cpi r24,lo8(33)
 901 00ea 01F4      		brne .L94
 550:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 902               		.loc 1 550 0
 903 00ec 8091 0000 		lds r24,USB_ControlRequest+4
 904 00f0 9091 0000 		lds r25,USB_ControlRequest+4+1
 905 00f4 892B      		or r24,r25
 906 00f6 01F4      		brne .L94
 907               	.LBB188:
 908               	.LBB189:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 909               		.loc 2 444 0
 910 00f8 8091 E800 		lds r24,232
 911 00fc 877F      		andi r24,lo8(-9)
 912 00fe 8093 E800 		sts 232,r24
 913               	.LBE189:
 914               	.LBE188:
 552:./tmk_core/protocol/lufa/lufa.c **** 
 915               		.loc 1 552 0
 916 0102 0E94 0000 		call Endpoint_ClearStatusStage
 917               	.LVL76:
 554:./tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 918               		.loc 1 554 0
 919 0106 8091 0000 		lds r24,USB_ControlRequest+2
 920 010a 8093 0000 		sts keyboard_protocol,r24
 555:./tmk_core/protocol/lufa/lufa.c ****                 }
 921               		.loc 1 555 0
 922 010e 0C94 0000 		jmp clear_keyboard
 923               	.LVL77:
 924               	.L100:
 561:./tmk_core/protocol/lufa/lufa.c ****             {
 925               		.loc 1 561 0
 926 0112 8091 0000 		lds r24,USB_ControlRequest
 927 0116 8132      		cpi r24,lo8(33)
 928 0118 01F4      		brne .L94
 929               	.LBB190:
 930               	.LBB191:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 931               		.loc 2 444 0
 932 011a 8091 E800 		lds r24,232
 933 011e 877F      		andi r24,lo8(-9)
 934 0120 8093 E800 		sts 232,r24
 935               	.LBE191:
 936               	.LBE190:
 564:./tmk_core/protocol/lufa/lufa.c **** 
 937               		.loc 1 564 0
 938 0124 0E94 0000 		call Endpoint_ClearStatusStage
 939               	.LVL78:
 566:./tmk_core/protocol/lufa/lufa.c ****             }
 940               		.loc 1 566 0
 941 0128 8091 0000 		lds r24,USB_ControlRequest+3
 942 012c 8093 0000 		sts keyboard_idle,r24
 943 0130 0895      		ret
 944               	.L99:
 571:./tmk_core/protocol/lufa/lufa.c ****             {
 945               		.loc 1 571 0
 946 0132 8091 0000 		lds r24,USB_ControlRequest
 947 0136 813A      		cpi r24,lo8(-95)
 948 0138 01F4      		brne .L94
 949               	.LBB192:
 950               	.LBB193:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 951               		.loc 2 444 0
 952 013a 8091 E800 		lds r24,232
 953 013e 877F      		andi r24,lo8(-9)
 954 0140 8093 E800 		sts 232,r24
 955               	.L111:
 956               	.LBE193:
 957               	.LBE192:
 958               	.LBB194:
 959               	.LBB195:
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 960               		.loc 2 407 0 discriminator 1
 961 0144 8091 E800 		lds r24,232
 962               	.LBE195:
 963               	.LBE194:
 574:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 964               		.loc 1 574 0 discriminator 1
 965 0148 80FF      		sbrs r24,0
 966 014a 00C0      		rjmp .L111
 575:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 967               		.loc 1 575 0
 968 014c 8091 0000 		lds r24,keyboard_idle
 969               	.L128:
 970               	.LVL79:
 971               	.LBB196:
 972               	.LBB197:
 543:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 544:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 545:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 546:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 547:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 548:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 549:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 550:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 551:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 552:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 553:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 554:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 973               		.loc 2 554 0
 974 0150 8093 F100 		sts 241,r24
 975               	.LBE197:
 976               	.LBE196:
 977               	.LBB198:
 978               	.LBB199:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 979               		.loc 2 456 0
 980 0154 8091 E800 		lds r24,232
 981               	.LVL80:
 982 0158 8E77      		andi r24,lo8(126)
 983               	.LVL81:
 984               	.L127:
 985 015a 8093 E800 		sts 232,r24
 986               	.LBE199:
 987               	.LBE198:
 577:./tmk_core/protocol/lufa/lufa.c ****             }
 988               		.loc 1 577 0
 989 015e 0C94 0000 		jmp Endpoint_ClearStatusStage
 990               	.LVL82:
 991               	.L94:
 992 0162 0895      		ret
 993               		.cfi_endproc
 994               	.LFE126:
 996               		.section	.text.sendchar,"ax",@progbits
 997               	.global	sendchar
 999               	sendchar:
 1000               	.LFB132:
 797:./tmk_core/protocol/lufa/lufa.c **** 
 798:./tmk_core/protocol/lufa/lufa.c **** 
 799:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 800:./tmk_core/protocol/lufa/lufa.c ****  * sendchar
 801:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 802:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 803:./tmk_core/protocol/lufa/lufa.c **** #define SEND_TIMEOUT 5
 804:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send Char
 805:./tmk_core/protocol/lufa/lufa.c ****  *
 806:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 807:./tmk_core/protocol/lufa/lufa.c ****  */
 808:./tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 809:./tmk_core/protocol/lufa/lufa.c **** {
 810:./tmk_core/protocol/lufa/lufa.c ****     // Not wait once timeouted.
 811:./tmk_core/protocol/lufa/lufa.c ****     // Because sendchar() is called so many times, waiting each call causes big lag.
 812:./tmk_core/protocol/lufa/lufa.c ****     static bool timeouted = false;
 813:./tmk_core/protocol/lufa/lufa.c **** 
 814:./tmk_core/protocol/lufa/lufa.c ****     // prevents Console_Task() from running during sendchar() runs.
 815:./tmk_core/protocol/lufa/lufa.c ****     // or char will be lost. These two function is mutually exclusive.
 816:./tmk_core/protocol/lufa/lufa.c ****     CONSOLE_FLUSH_SET(false);
 817:./tmk_core/protocol/lufa/lufa.c **** 
 818:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 819:./tmk_core/protocol/lufa/lufa.c ****         return -1;
 820:./tmk_core/protocol/lufa/lufa.c **** 
 821:./tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 822:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 823:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 824:./tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 825:./tmk_core/protocol/lufa/lufa.c ****     }
 826:./tmk_core/protocol/lufa/lufa.c **** 
 827:./tmk_core/protocol/lufa/lufa.c ****     if (timeouted && !Endpoint_IsReadWriteAllowed()) {
 828:./tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 829:./tmk_core/protocol/lufa/lufa.c ****     }
 830:./tmk_core/protocol/lufa/lufa.c **** 
 831:./tmk_core/protocol/lufa/lufa.c ****     timeouted = false;
 832:./tmk_core/protocol/lufa/lufa.c **** 
 833:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = SEND_TIMEOUT;
 834:./tmk_core/protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 835:./tmk_core/protocol/lufa/lufa.c ****         if (USB_DeviceState != DEVICE_STATE_Configured) {
 836:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 837:./tmk_core/protocol/lufa/lufa.c ****         }
 838:./tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 839:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 840:./tmk_core/protocol/lufa/lufa.c ****         }
 841:./tmk_core/protocol/lufa/lufa.c ****         if (!(timeout--)) {
 842:./tmk_core/protocol/lufa/lufa.c ****             timeouted = true;
 843:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 844:./tmk_core/protocol/lufa/lufa.c ****         }
 845:./tmk_core/protocol/lufa/lufa.c ****         _delay_ms(1);
 846:./tmk_core/protocol/lufa/lufa.c ****     }
 847:./tmk_core/protocol/lufa/lufa.c **** 
 848:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(c);
 849:./tmk_core/protocol/lufa/lufa.c **** 
 850:./tmk_core/protocol/lufa/lufa.c ****     // send when bank is full
 851:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) {
 852:./tmk_core/protocol/lufa/lufa.c ****         while (!(Endpoint_IsINReady()));
 853:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 854:./tmk_core/protocol/lufa/lufa.c ****     } else {
 855:./tmk_core/protocol/lufa/lufa.c ****         CONSOLE_FLUSH_SET(true);
 856:./tmk_core/protocol/lufa/lufa.c ****     }
 857:./tmk_core/protocol/lufa/lufa.c **** 
 858:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 859:./tmk_core/protocol/lufa/lufa.c ****     return 0;
 860:./tmk_core/protocol/lufa/lufa.c **** ERROR_EXIT:
 861:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 862:./tmk_core/protocol/lufa/lufa.c ****     return -1;
 863:./tmk_core/protocol/lufa/lufa.c **** }
 864:./tmk_core/protocol/lufa/lufa.c **** #else
 865:./tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 866:./tmk_core/protocol/lufa/lufa.c **** {
 1001               		.loc 1 866 0
 1002               		.cfi_startproc
 1003               	.LVL83:
 1004               	/* prologue: function */
 1005               	/* frame size = 0 */
 1006               	/* stack size = 0 */
 1007               	.L__stack_usage = 0
 867:./tmk_core/protocol/lufa/lufa.c ****     return 0;
 868:./tmk_core/protocol/lufa/lufa.c **** }
 1008               		.loc 1 868 0
 1009 0000 80E0      		ldi r24,0
 1010               	.LVL84:
 1011 0002 0895      		ret
 1012               		.cfi_endproc
 1013               	.LFE132:
 1015               		.section	.text.startup.main,"ax",@progbits
 1016               		.weak	main
 1018               	main:
 1019               	.LFB135:
 869:./tmk_core/protocol/lufa/lufa.c **** #endif
 870:./tmk_core/protocol/lufa/lufa.c **** 
 871:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 872:./tmk_core/protocol/lufa/lufa.c ****  * MIDI
 873:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 874:./tmk_core/protocol/lufa/lufa.c **** 
 875:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 876:./tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_MIDI_Device_t USB_MIDI_Interface =
 877:./tmk_core/protocol/lufa/lufa.c **** {
 878:./tmk_core/protocol/lufa/lufa.c ****   .Config =
 879:./tmk_core/protocol/lufa/lufa.c ****   {
 880:./tmk_core/protocol/lufa/lufa.c ****     .StreamingInterfaceNumber = AS_INTERFACE,
 881:./tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint           =
 882:./tmk_core/protocol/lufa/lufa.c ****     {
 883:./tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_IN_EPADDR,
 884:./tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 885:./tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 886:./tmk_core/protocol/lufa/lufa.c ****     },
 887:./tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint          =
 888:./tmk_core/protocol/lufa/lufa.c ****     {
 889:./tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_OUT_EPADDR,
 890:./tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 891:./tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 892:./tmk_core/protocol/lufa/lufa.c ****     },
 893:./tmk_core/protocol/lufa/lufa.c ****   },
 894:./tmk_core/protocol/lufa/lufa.c **** };
 895:./tmk_core/protocol/lufa/lufa.c **** 
 896:./tmk_core/protocol/lufa/lufa.c **** void send_midi_packet(MIDI_EventPacket_t* event) {
 897:./tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_SendEventPacket(&USB_MIDI_Interface, event);
 898:./tmk_core/protocol/lufa/lufa.c **** }
 899:./tmk_core/protocol/lufa/lufa.c **** 
 900:./tmk_core/protocol/lufa/lufa.c **** bool recv_midi_packet(MIDI_EventPacket_t* const event) {
 901:./tmk_core/protocol/lufa/lufa.c ****   return MIDI_Device_ReceiveEventPacket(&USB_MIDI_Interface, event);
 902:./tmk_core/protocol/lufa/lufa.c **** }
 903:./tmk_core/protocol/lufa/lufa.c **** 
 904:./tmk_core/protocol/lufa/lufa.c **** #endif
 905:./tmk_core/protocol/lufa/lufa.c **** 
 906:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 907:./tmk_core/protocol/lufa/lufa.c ****  * VIRTUAL SERIAL
 908:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 909:./tmk_core/protocol/lufa/lufa.c **** 
 910:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 911:./tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Init
 912:./tmk_core/protocol/lufa/lufa.c ****  *
 913:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 914:./tmk_core/protocol/lufa/lufa.c ****  */
 915:./tmk_core/protocol/lufa/lufa.c **** void virtser_init(void)
 916:./tmk_core/protocol/lufa/lufa.c **** {
 917:./tmk_core/protocol/lufa/lufa.c ****   cdc_device.State.ControlLineStates.DeviceToHost = CDC_CONTROL_LINE_IN_DSR ;
 918:./tmk_core/protocol/lufa/lufa.c ****   CDC_Device_SendControlLineStateChange(&cdc_device);
 919:./tmk_core/protocol/lufa/lufa.c **** }
 920:./tmk_core/protocol/lufa/lufa.c **** 
 921:./tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Receive
 922:./tmk_core/protocol/lufa/lufa.c ****  *
 923:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 924:./tmk_core/protocol/lufa/lufa.c ****  */
 925:./tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c) __attribute__ ((weak));
 926:./tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c)
 927:./tmk_core/protocol/lufa/lufa.c **** {
 928:./tmk_core/protocol/lufa/lufa.c ****   // Ignore by default
 929:./tmk_core/protocol/lufa/lufa.c **** }
 930:./tmk_core/protocol/lufa/lufa.c **** 
 931:./tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Task
 932:./tmk_core/protocol/lufa/lufa.c ****  *
 933:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 934:./tmk_core/protocol/lufa/lufa.c ****  */
 935:./tmk_core/protocol/lufa/lufa.c **** void virtser_task(void)
 936:./tmk_core/protocol/lufa/lufa.c **** {
 937:./tmk_core/protocol/lufa/lufa.c ****   uint16_t count = CDC_Device_BytesReceived(&cdc_device);
 938:./tmk_core/protocol/lufa/lufa.c ****   uint8_t ch;
 939:./tmk_core/protocol/lufa/lufa.c ****   if (count)
 940:./tmk_core/protocol/lufa/lufa.c ****   {
 941:./tmk_core/protocol/lufa/lufa.c ****     ch = CDC_Device_ReceiveByte(&cdc_device);
 942:./tmk_core/protocol/lufa/lufa.c ****     virtser_recv(ch);
 943:./tmk_core/protocol/lufa/lufa.c ****   }
 944:./tmk_core/protocol/lufa/lufa.c **** }
 945:./tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Send
 946:./tmk_core/protocol/lufa/lufa.c ****  *
 947:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 948:./tmk_core/protocol/lufa/lufa.c ****  */
 949:./tmk_core/protocol/lufa/lufa.c **** void virtser_send(const uint8_t byte)
 950:./tmk_core/protocol/lufa/lufa.c **** {
 951:./tmk_core/protocol/lufa/lufa.c ****   uint8_t timeout = 255;
 952:./tmk_core/protocol/lufa/lufa.c ****   uint8_t ep = Endpoint_GetCurrentEndpoint();
 953:./tmk_core/protocol/lufa/lufa.c **** 
 954:./tmk_core/protocol/lufa/lufa.c ****   if (cdc_device.State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR)
 955:./tmk_core/protocol/lufa/lufa.c ****   {
 956:./tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 957:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(cdc_device.Config.DataINEndpoint.Address);
 958:./tmk_core/protocol/lufa/lufa.c **** 
 959:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 960:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 961:./tmk_core/protocol/lufa/lufa.c ****         return;
 962:./tmk_core/protocol/lufa/lufa.c ****     }
 963:./tmk_core/protocol/lufa/lufa.c **** 
 964:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 965:./tmk_core/protocol/lufa/lufa.c **** 
 966:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(byte);
 967:./tmk_core/protocol/lufa/lufa.c ****     CDC_Device_Flush(&cdc_device);
 968:./tmk_core/protocol/lufa/lufa.c **** 
 969:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 970:./tmk_core/protocol/lufa/lufa.c ****       Endpoint_ClearIN();
 971:./tmk_core/protocol/lufa/lufa.c ****     }
 972:./tmk_core/protocol/lufa/lufa.c **** 
 973:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 974:./tmk_core/protocol/lufa/lufa.c ****   }
 975:./tmk_core/protocol/lufa/lufa.c **** }
 976:./tmk_core/protocol/lufa/lufa.c **** #endif
 977:./tmk_core/protocol/lufa/lufa.c **** 
 978:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 979:./tmk_core/protocol/lufa/lufa.c ****  * main
 980:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 981:./tmk_core/protocol/lufa/lufa.c **** /** \brief Setup MCU
 982:./tmk_core/protocol/lufa/lufa.c ****  *
 983:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 984:./tmk_core/protocol/lufa/lufa.c ****  */
 985:./tmk_core/protocol/lufa/lufa.c **** static void setup_mcu(void)
 986:./tmk_core/protocol/lufa/lufa.c **** {
 987:./tmk_core/protocol/lufa/lufa.c ****     /* Disable watchdog if enabled by bootloader/fuses */
 988:./tmk_core/protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
 989:./tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 990:./tmk_core/protocol/lufa/lufa.c **** 
 991:./tmk_core/protocol/lufa/lufa.c ****     /* Disable clock division */
 992:./tmk_core/protocol/lufa/lufa.c ****     // clock_prescale_set(clock_div_1);
 993:./tmk_core/protocol/lufa/lufa.c **** 
 994:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (1 << CLKPCE);
 995:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 996:./tmk_core/protocol/lufa/lufa.c **** }
 997:./tmk_core/protocol/lufa/lufa.c **** 
 998:./tmk_core/protocol/lufa/lufa.c **** /** \brief Setup USB
 999:./tmk_core/protocol/lufa/lufa.c ****  *
1000:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
1001:./tmk_core/protocol/lufa/lufa.c ****  */
1002:./tmk_core/protocol/lufa/lufa.c **** static void setup_usb(void)
1003:./tmk_core/protocol/lufa/lufa.c **** {
1004:./tmk_core/protocol/lufa/lufa.c ****     // Leonardo needs. Without this USB device is not recognized.
1005:./tmk_core/protocol/lufa/lufa.c ****     USB_Disable();
1006:./tmk_core/protocol/lufa/lufa.c **** 
1007:./tmk_core/protocol/lufa/lufa.c ****     USB_Init();
1008:./tmk_core/protocol/lufa/lufa.c **** 
1009:./tmk_core/protocol/lufa/lufa.c ****     // for Console_Task
1010:./tmk_core/protocol/lufa/lufa.c ****     USB_Device_EnableSOFEvents();
1011:./tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
1012:./tmk_core/protocol/lufa/lufa.c **** }
1013:./tmk_core/protocol/lufa/lufa.c **** 
1014:./tmk_core/protocol/lufa/lufa.c **** /** \brief Main
1015:./tmk_core/protocol/lufa/lufa.c ****  *
1016:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
1017:./tmk_core/protocol/lufa/lufa.c ****  */
1018:./tmk_core/protocol/lufa/lufa.c **** int main(void)  __attribute__ ((weak));
1019:./tmk_core/protocol/lufa/lufa.c **** int main(void)
1020:./tmk_core/protocol/lufa/lufa.c **** {
 1020               		.loc 1 1020 0
 1021               		.cfi_startproc
 1022               	/* prologue: function */
 1023               	/* frame size = 0 */
 1024               	/* stack size = 0 */
 1025               	.L__stack_usage = 0
 1026               	.LBB209:
 1027               	.LBB210:
 988:./tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 1028               		.loc 1 988 0
 1029 0000 84B7      		in r24,0x34
 1030 0002 877F      		andi r24,lo8(-9)
 1031 0004 84BF      		out 0x34,r24
 1032               	.LBB211:
 1033               	.LBB212:
 1034               		.file 5 "/usr/lib/avr/include/avr/wdt.h"
   1:/usr/lib/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/lib/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/lib/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/wdt.h **** 
   5:/usr/lib/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/wdt.h **** 
   8:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/wdt.h **** 
  11:/usr/lib/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/avr/include/avr/wdt.h ****      distribution.
  15:/usr/lib/avr/include/avr/wdt.h **** 
  16:/usr/lib/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/lib/avr/include/avr/wdt.h **** 
  20:/usr/lib/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/avr/include/avr/wdt.h **** 
  32:/usr/lib/avr/include/avr/wdt.h **** /* $Id$ */
  33:/usr/lib/avr/include/avr/wdt.h **** 
  34:/usr/lib/avr/include/avr/wdt.h **** /*
  35:/usr/lib/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/lib/avr/include/avr/wdt.h ****  */
  37:/usr/lib/avr/include/avr/wdt.h **** 
  38:/usr/lib/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/lib/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/lib/avr/include/avr/wdt.h **** 
  41:/usr/lib/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/lib/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/lib/avr/include/avr/wdt.h **** 
  44:/usr/lib/avr/include/avr/wdt.h **** /** \file */
  45:/usr/lib/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/lib/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/lib/avr/include/avr/wdt.h **** 
  48:/usr/lib/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/lib/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/lib/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/lib/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/lib/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/lib/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/lib/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/lib/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/lib/avr/include/avr/wdt.h **** 
  57:/usr/lib/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/lib/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/lib/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/lib/avr/include/avr/wdt.h **** 
  61:/usr/lib/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/lib/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/lib/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/lib/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/lib/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/lib/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/lib/avr/include/avr/wdt.h ****     the following:
  68:/usr/lib/avr/include/avr/wdt.h **** 
  69:/usr/lib/avr/include/avr/wdt.h ****     \code
  70:/usr/lib/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/lib/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/lib/avr/include/avr/wdt.h **** 
  73:/usr/lib/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/lib/avr/include/avr/wdt.h **** 
  75:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/lib/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/lib/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/lib/avr/include/avr/wdt.h ****     {
  80:/usr/lib/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/lib/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/lib/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/lib/avr/include/avr/wdt.h ****     }
  84:/usr/lib/avr/include/avr/wdt.h ****     \endcode
  85:/usr/lib/avr/include/avr/wdt.h **** 
  86:/usr/lib/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/lib/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/lib/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/lib/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/lib/avr/include/avr/wdt.h **** */
  91:/usr/lib/avr/include/avr/wdt.h **** 
  92:/usr/lib/avr/include/avr/wdt.h **** /**
  93:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/lib/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/lib/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/lib/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/lib/avr/include/avr/wdt.h **** */
  98:/usr/lib/avr/include/avr/wdt.h **** 
  99:/usr/lib/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/lib/avr/include/avr/wdt.h **** 
 101:/usr/lib/avr/include/avr/wdt.h **** 
 102:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDP3)
 103:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 104:/usr/lib/avr/include/avr/wdt.h **** #else
 105:/usr/lib/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 106:/usr/lib/avr/include/avr/wdt.h **** #endif
 107:/usr/lib/avr/include/avr/wdt.h **** 
 108:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 109:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 110:/usr/lib/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 111:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 112:/usr/lib/avr/include/avr/wdt.h **** #else
 113:/usr/lib/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 114:/usr/lib/avr/include/avr/wdt.h **** #endif
 115:/usr/lib/avr/include/avr/wdt.h **** 
 116:/usr/lib/avr/include/avr/wdt.h **** #if defined(WDTOE)
 117:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 118:/usr/lib/avr/include/avr/wdt.h **** #else
 119:/usr/lib/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 120:/usr/lib/avr/include/avr/wdt.h **** #endif
 121:/usr/lib/avr/include/avr/wdt.h **** 
 122:/usr/lib/avr/include/avr/wdt.h **** 
 123:/usr/lib/avr/include/avr/wdt.h **** /**
 124:/usr/lib/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 125:/usr/lib/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 126:/usr/lib/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 127:/usr/lib/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 128:/usr/lib/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 129:/usr/lib/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 130:/usr/lib/avr/include/avr/wdt.h **** 
 131:/usr/lib/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 132:/usr/lib/avr/include/avr/wdt.h **** */
 133:/usr/lib/avr/include/avr/wdt.h **** 
 134:/usr/lib/avr/include/avr/wdt.h **** 
 135:/usr/lib/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 136:/usr/lib/avr/include/avr/wdt.h **** 
 137:/usr/lib/avr/include/avr/wdt.h **** /*
 138:/usr/lib/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 139:/usr/lib/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 140:/usr/lib/avr/include/avr/wdt.h ****    registers to the CCP register
 141:/usr/lib/avr/include/avr/wdt.h **** ** At the same time,
 142:/usr/lib/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 143:/usr/lib/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 144:/usr/lib/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 145:/usr/lib/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 146:/usr/lib/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 147:/usr/lib/avr/include/avr/wdt.h ****    sync is finished).
 148:/usr/lib/avr/include/avr/wdt.h **** */
 149:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 150:/usr/lib/avr/include/avr/wdt.h **** do { \
 151:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp; \
 152:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 153:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 154:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 155:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 156:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 157:/usr/lib/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 158:/usr/lib/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 159:/usr/lib/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 160:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 161:/usr/lib/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 162:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 163:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 164:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 165:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 166:/usr/lib/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 167:/usr/lib/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 168:/usr/lib/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 169:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 170:/usr/lib/avr/include/avr/wdt.h **** ); \
 171:/usr/lib/avr/include/avr/wdt.h **** } while(0)
 172:/usr/lib/avr/include/avr/wdt.h **** 
 173:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 174:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 175:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 176:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 177:/usr/lib/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 178:/usr/lib/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 179:/usr/lib/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 180:/usr/lib/avr/include/avr/wdt.h ****     : \
 181:/usr/lib/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 182:/usr/lib/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 183:/usr/lib/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 184:/usr/lib/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 185:/usr/lib/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 186:/usr/lib/avr/include/avr/wdt.h ****     : "r0" \
 187:/usr/lib/avr/include/avr/wdt.h **** );
 188:/usr/lib/avr/include/avr/wdt.h **** 
 189:/usr/lib/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 190:/usr/lib/avr/include/avr/wdt.h **** 
 191:/usr/lib/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 192:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 193:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 194:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 195:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 196:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 197:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 198:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 199:/usr/lib/avr/include/avr/wdt.h ****     : /* no outputs */  \
 200:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 201:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 202:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 203:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 204:/usr/lib/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 205:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 206:/usr/lib/avr/include/avr/wdt.h **** )
 207:/usr/lib/avr/include/avr/wdt.h **** 
 208:/usr/lib/avr/include/avr/wdt.h **** #define wdt_disable() \
 209:/usr/lib/avr/include/avr/wdt.h **** do { \
 210:/usr/lib/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 211:/usr/lib/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 212:/usr/lib/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 213:/usr/lib/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 214:/usr/lib/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 215:/usr/lib/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 216:/usr/lib/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 217:/usr/lib/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 218:/usr/lib/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 219:/usr/lib/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 220:/usr/lib/avr/include/avr/wdt.h ****     : /*no output */ \
 221:/usr/lib/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 222:/usr/lib/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 223:/usr/lib/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 224:/usr/lib/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 225:/usr/lib/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 226:/usr/lib/avr/include/avr/wdt.h ****     : "r16" \
 227:/usr/lib/avr/include/avr/wdt.h **** ); \
 228:/usr/lib/avr/include/avr/wdt.h **** }while(0)
 229:/usr/lib/avr/include/avr/wdt.h **** 
 230:/usr/lib/avr/include/avr/wdt.h **** #elif defined(CCP)
 231:/usr/lib/avr/include/avr/wdt.h **** 
 232:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 233:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 234:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 235:/usr/lib/avr/include/avr/wdt.h **** {
 236:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 237:/usr/lib/avr/include/avr/wdt.h **** 	{
 238:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 239:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 240:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 241:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 242:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 243:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 244:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 245:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 246:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 247:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 248:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 249:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 250:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 251:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 252:/usr/lib/avr/include/avr/wdt.h **** 			);
 253:/usr/lib/avr/include/avr/wdt.h **** 	}
 254:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 255:/usr/lib/avr/include/avr/wdt.h **** 	{
 256:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 257:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 258:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 259:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 260:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 261:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 262:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 263:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 264:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 265:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 266:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 267:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 268:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 269:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 270:/usr/lib/avr/include/avr/wdt.h **** 			);
 271:/usr/lib/avr/include/avr/wdt.h **** 	}
 272:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 273:/usr/lib/avr/include/avr/wdt.h **** 	{
 274:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 275:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 276:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 277:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 278:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 279:/usr/lib/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 280:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 281:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 282:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 283:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 284:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 285:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 286:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 287:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 288:/usr/lib/avr/include/avr/wdt.h **** 			);
 289:/usr/lib/avr/include/avr/wdt.h **** 	}
 290:/usr/lib/avr/include/avr/wdt.h **** 	else
 291:/usr/lib/avr/include/avr/wdt.h ****  	{
 292:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 293:/usr/lib/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 294:/usr/lib/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 295:/usr/lib/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 296:/usr/lib/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 297:/usr/lib/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 298:/usr/lib/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 299:/usr/lib/avr/include/avr/wdt.h **** 			: /* no outputs */
 300:/usr/lib/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 301:/usr/lib/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 302:/usr/lib/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 303:/usr/lib/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 304:/usr/lib/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 305:/usr/lib/avr/include/avr/wdt.h **** 			: "r0"
 306:/usr/lib/avr/include/avr/wdt.h **** 			);
 307:/usr/lib/avr/include/avr/wdt.h **** 	}
 308:/usr/lib/avr/include/avr/wdt.h **** }
 309:/usr/lib/avr/include/avr/wdt.h **** 
 310:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 311:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 312:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 313:/usr/lib/avr/include/avr/wdt.h **** {
 314:/usr/lib/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 315:/usr/lib/avr/include/avr/wdt.h **** 	{
 316:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 317:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 318:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 319:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 320:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 321:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 322:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 323:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 324:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 325:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 326:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 327:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 328:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 329:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 330:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 331:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 332:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 333:/usr/lib/avr/include/avr/wdt.h **** 				);
 334:/usr/lib/avr/include/avr/wdt.h **** 	}
 335:/usr/lib/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 336:/usr/lib/avr/include/avr/wdt.h **** 	{
 337:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 338:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 339:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 340:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 341:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 342:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 343:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 344:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 345:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 346:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 347:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 348:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 349:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 350:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 351:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 352:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 353:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 354:/usr/lib/avr/include/avr/wdt.h **** 				);
 355:/usr/lib/avr/include/avr/wdt.h **** 	}
 356:/usr/lib/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 357:/usr/lib/avr/include/avr/wdt.h **** 	{
 358:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 359:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 360:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 361:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 362:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 363:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 364:/usr/lib/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 365:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 366:/usr/lib/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 367:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 368:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 369:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 370:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 371:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 372:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 373:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 374:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 375:/usr/lib/avr/include/avr/wdt.h **** 				);
 376:/usr/lib/avr/include/avr/wdt.h **** 	}
 377:/usr/lib/avr/include/avr/wdt.h **** 	else
 378:/usr/lib/avr/include/avr/wdt.h **** 	{
 379:/usr/lib/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 380:/usr/lib/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 381:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 382:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 383:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 384:/usr/lib/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 385:/usr/lib/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 386:/usr/lib/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 387:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 388:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 389:/usr/lib/avr/include/avr/wdt.h **** 				: /*no output */
 390:/usr/lib/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 391:/usr/lib/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 392:/usr/lib/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 393:/usr/lib/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 394:/usr/lib/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 395:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 396:/usr/lib/avr/include/avr/wdt.h **** 				);
 397:/usr/lib/avr/include/avr/wdt.h **** 	}
 398:/usr/lib/avr/include/avr/wdt.h **** }
 399:/usr/lib/avr/include/avr/wdt.h **** 
 400:/usr/lib/avr/include/avr/wdt.h **** #else
 401:/usr/lib/avr/include/avr/wdt.h **** 
 402:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 403:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 404:/usr/lib/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 405:/usr/lib/avr/include/avr/wdt.h **** {
 406:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 407:/usr/lib/avr/include/avr/wdt.h **** 	{
 408:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 409:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 410:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 411:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 412:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 413:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 414:/usr/lib/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 415:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 416:/usr/lib/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 417:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 418:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 419:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 420:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 421:/usr/lib/avr/include/avr/wdt.h **** 		);
 422:/usr/lib/avr/include/avr/wdt.h **** 	}
 423:/usr/lib/avr/include/avr/wdt.h **** 	else
 424:/usr/lib/avr/include/avr/wdt.h **** 	{
 425:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 426:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 427:/usr/lib/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 428:/usr/lib/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 429:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 430:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 431:/usr/lib/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 432:/usr/lib/avr/include/avr/wdt.h **** 				: /* no outputs */
 433:/usr/lib/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 434:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 435:/usr/lib/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 436:/usr/lib/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 437:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 438:/usr/lib/avr/include/avr/wdt.h **** 		);
 439:/usr/lib/avr/include/avr/wdt.h **** 	}
 440:/usr/lib/avr/include/avr/wdt.h **** }
 441:/usr/lib/avr/include/avr/wdt.h **** 
 442:/usr/lib/avr/include/avr/wdt.h **** static __inline__
 443:/usr/lib/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 444:/usr/lib/avr/include/avr/wdt.h **** void wdt_disable (void)
 445:/usr/lib/avr/include/avr/wdt.h **** {
 446:/usr/lib/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 447:/usr/lib/avr/include/avr/wdt.h **** 	{
 448:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 449:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 450:/usr/lib/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 451:/usr/lib/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 452:/usr/lib/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 453:/usr/lib/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 454:/usr/lib/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 455:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 456:/usr/lib/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 457:/usr/lib/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 458:/usr/lib/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 459:/usr/lib/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 460:/usr/lib/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 461:/usr/lib/avr/include/avr/wdt.h **** 				: "r0"
 462:/usr/lib/avr/include/avr/wdt.h **** 		);
 463:/usr/lib/avr/include/avr/wdt.h **** 	}
 464:/usr/lib/avr/include/avr/wdt.h **** 	else
 465:/usr/lib/avr/include/avr/wdt.h **** 	{
 466:/usr/lib/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 467:/usr/lib/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 1035               		.loc 5 467 0
 1036               	/* #APP */
 1037               	 ;  467 "/usr/lib/avr/include/avr/wdt.h" 1
 1038 0006 0FB6      		in __tmp_reg__,__SREG__
 1039 0008 F894      		cli
 1040 000a A895      		wdr
 1041 000c 8091 6000 		lds r24,96
 1042 0010 8861      		ori r24,24
 1043 0012 8093 6000 		sts 96,r24
 1044 0016 1092 6000 		sts 96,__zero_reg__
 1045 001a 0FBE      		out __SREG__,__tmp_reg__
 1046               		
 1047               	 ;  0 "" 2
 1048               	.LVL85:
 1049               	/* #NOAPP */
 1050               	.LBE212:
 1051               	.LBE211:
 994:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 1052               		.loc 1 994 0
 1053 001c 80E8      		ldi r24,lo8(-128)
 1054 001e 8093 6100 		sts 97,r24
 995:./tmk_core/protocol/lufa/lufa.c **** }
 1055               		.loc 1 995 0
 1056 0022 1092 6100 		sts 97,__zero_reg__
 1057               	.LBE210:
 1058               	.LBE209:
1021:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1022:./tmk_core/protocol/lufa/lufa.c ****     setup_midi();
1023:./tmk_core/protocol/lufa/lufa.c **** #endif
1024:./tmk_core/protocol/lufa/lufa.c **** 
1025:./tmk_core/protocol/lufa/lufa.c ****     setup_mcu();
1026:./tmk_core/protocol/lufa/lufa.c ****     keyboard_setup();
 1059               		.loc 1 1026 0
 1060 0026 0E94 0000 		call keyboard_setup
 1061               	.LVL86:
 1062               	.LBB213:
 1063               	.LBB214:
1005:./tmk_core/protocol/lufa/lufa.c **** 
 1064               		.loc 1 1005 0
 1065 002a 0E94 0000 		call USB_Disable
 1066               	.LVL87:
1007:./tmk_core/protocol/lufa/lufa.c **** 
 1067               		.loc 1 1007 0
 1068 002e 0E94 0000 		call USB_Init
 1069               	.LVL88:
 1070               	.LBB215:
 1071               	.LBB216:
 1072               	.LBB217:
 1073               		.loc 4 113 0
 1074 0032 8091 E200 		lds r24,226
 1075 0036 8460      		ori r24,lo8(4)
 1076 0038 8093 E200 		sts 226,r24
 1077               	.LBE217:
 1078               	.LBE216:
 1079               	.LBE215:
 1080               	.LBE214:
 1081               	.LBE213:
1027:./tmk_core/protocol/lufa/lufa.c ****     setup_usb();
1028:./tmk_core/protocol/lufa/lufa.c ****     sei();
 1082               		.loc 1 1028 0
 1083               	/* #APP */
 1084               	 ;  1028 "./tmk_core/protocol/lufa/lufa.c" 1
 1085 003c 7894      		sei
 1086               	 ;  0 "" 2
1029:./tmk_core/protocol/lufa/lufa.c **** 
1030:./tmk_core/protocol/lufa/lufa.c **** #if defined(MODULE_ADAFRUIT_EZKEY) || defined(MODULE_RN42)
1031:./tmk_core/protocol/lufa/lufa.c ****     serial_init();
1032:./tmk_core/protocol/lufa/lufa.c **** #endif
1033:./tmk_core/protocol/lufa/lufa.c **** 
1034:./tmk_core/protocol/lufa/lufa.c ****     /* wait for USB startup & debug output */
1035:./tmk_core/protocol/lufa/lufa.c **** 
1036:./tmk_core/protocol/lufa/lufa.c **** #ifdef WAIT_FOR_USB
1037:./tmk_core/protocol/lufa/lufa.c ****     while (USB_DeviceState != DEVICE_STATE_Configured) {
1038:./tmk_core/protocol/lufa/lufa.c ****     #if defined(INTERRUPT_CONTROL_ENDPOINT)
1039:./tmk_core/protocol/lufa/lufa.c ****             ;
1040:./tmk_core/protocol/lufa/lufa.c ****     #else
1041:./tmk_core/protocol/lufa/lufa.c ****             USB_USBTask();
1042:./tmk_core/protocol/lufa/lufa.c ****     #endif
1043:./tmk_core/protocol/lufa/lufa.c ****     }
1044:./tmk_core/protocol/lufa/lufa.c ****     print("USB configured.\n");
1045:./tmk_core/protocol/lufa/lufa.c **** #else
1046:./tmk_core/protocol/lufa/lufa.c ****     USB_USBTask();
 1087               		.loc 1 1046 0
 1088               	/* #NOAPP */
 1089 003e 0E94 0000 		call USB_USBTask
 1090               	.LVL89:
1047:./tmk_core/protocol/lufa/lufa.c **** #endif
1048:./tmk_core/protocol/lufa/lufa.c ****     /* init modules */
1049:./tmk_core/protocol/lufa/lufa.c ****     keyboard_init();
 1091               		.loc 1 1049 0
 1092 0042 0E94 0000 		call keyboard_init
 1093               	.LVL90:
1050:./tmk_core/protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 1094               		.loc 1 1050 0
 1095 0046 80E0      		ldi r24,lo8(lufa_driver)
 1096 0048 90E0      		ldi r25,hi8(lufa_driver)
 1097 004a 0E94 0000 		call host_set_driver
 1098               	.LVL91:
 1099               	.L133:
1051:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
1052:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_init();
1053:./tmk_core/protocol/lufa/lufa.c **** #endif
1054:./tmk_core/protocol/lufa/lufa.c **** 
1055:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1056:./tmk_core/protocol/lufa/lufa.c ****     virtser_init();
1057:./tmk_core/protocol/lufa/lufa.c **** #endif
1058:./tmk_core/protocol/lufa/lufa.c **** 
1059:./tmk_core/protocol/lufa/lufa.c ****     print("Keyboard start.\n");
1060:./tmk_core/protocol/lufa/lufa.c ****     while (1) {
1061:./tmk_core/protocol/lufa/lufa.c ****         #if !defined(NO_USB_STARTUP_CHECK)
1062:./tmk_core/protocol/lufa/lufa.c ****         while (USB_DeviceState == DEVICE_STATE_Suspended) {
 1100               		.loc 1 1062 0
 1101 004e 8091 0000 		lds r24,USB_DeviceState
 1102 0052 8530      		cpi r24,lo8(5)
 1103 0054 01F4      		brne .L141
1063:./tmk_core/protocol/lufa/lufa.c ****             print("[s]");
1064:./tmk_core/protocol/lufa/lufa.c ****             suspend_power_down();
 1104               		.loc 1 1064 0
 1105 0056 0E94 0000 		call suspend_power_down
 1106               	.LVL92:
1065:./tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 1107               		.loc 1 1065 0
 1108 005a 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 1109 005e 8823      		tst r24
 1110 0060 01F0      		breq .L133
 1111               		.loc 1 1065 0 is_stmt 0 discriminator 1
 1112 0062 0E94 0000 		call suspend_wakeup_condition
 1113               	.LVL93:
 1114 0066 8823      		tst r24
 1115 0068 01F0      		breq .L133
1066:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1116               		.loc 1 1066 0 is_stmt 1
 1117 006a 0E94 0000 		call USB_Device_SendRemoteWakeup
 1118               	.LVL94:
 1119 006e 00C0      		rjmp .L133
 1120               	.L141:
1067:./tmk_core/protocol/lufa/lufa.c ****             }
1068:./tmk_core/protocol/lufa/lufa.c ****         }
1069:./tmk_core/protocol/lufa/lufa.c ****         #endif
1070:./tmk_core/protocol/lufa/lufa.c **** 
1071:./tmk_core/protocol/lufa/lufa.c ****         keyboard_task();
 1121               		.loc 1 1071 0
 1122 0070 0E94 0000 		call keyboard_task
 1123               	.LVL95:
1072:./tmk_core/protocol/lufa/lufa.c **** 
1073:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1074:./tmk_core/protocol/lufa/lufa.c ****         MIDI_Device_USBTask(&USB_MIDI_Interface);
1075:./tmk_core/protocol/lufa/lufa.c **** #endif
1076:./tmk_core/protocol/lufa/lufa.c **** 
1077:./tmk_core/protocol/lufa/lufa.c **** #if defined(RGBLIGHT_ANIMATIONS) & defined(RGBLIGHT_ENABLE)
1078:./tmk_core/protocol/lufa/lufa.c ****         rgblight_task();
 1124               		.loc 1 1078 0
 1125 0074 0E94 0000 		call rgblight_task
 1126               	.LVL96:
1079:./tmk_core/protocol/lufa/lufa.c **** #endif
1080:./tmk_core/protocol/lufa/lufa.c **** 
1081:./tmk_core/protocol/lufa/lufa.c **** #ifdef MODULE_ADAFRUIT_BLE
1082:./tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_task();
1083:./tmk_core/protocol/lufa/lufa.c **** #endif
1084:./tmk_core/protocol/lufa/lufa.c **** 
1085:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1086:./tmk_core/protocol/lufa/lufa.c ****         virtser_task();
1087:./tmk_core/protocol/lufa/lufa.c ****         CDC_Device_USBTask(&cdc_device);
1088:./tmk_core/protocol/lufa/lufa.c **** #endif
1089:./tmk_core/protocol/lufa/lufa.c **** 
1090:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
1091:./tmk_core/protocol/lufa/lufa.c ****         raw_hid_task();
1092:./tmk_core/protocol/lufa/lufa.c **** #endif
1093:./tmk_core/protocol/lufa/lufa.c **** 
1094:./tmk_core/protocol/lufa/lufa.c **** #if !defined(INTERRUPT_CONTROL_ENDPOINT)
1095:./tmk_core/protocol/lufa/lufa.c ****         USB_USBTask();
1096:./tmk_core/protocol/lufa/lufa.c **** #endif
1097:./tmk_core/protocol/lufa/lufa.c **** 
1098:./tmk_core/protocol/lufa/lufa.c ****     }
 1127               		.loc 1 1098 0
 1128 0078 00C0      		rjmp .L133
 1129               		.cfi_endproc
 1130               	.LFE135:
 1132               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
 1133               	.global	CALLBACK_USB_GetDescriptor
 1135               	CALLBACK_USB_GetDescriptor:
 1136               	.LFB136:
1099:./tmk_core/protocol/lufa/lufa.c **** }
1100:./tmk_core/protocol/lufa/lufa.c **** 
1101:./tmk_core/protocol/lufa/lufa.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
1102:./tmk_core/protocol/lufa/lufa.c ****                                     const uint16_t wIndex,
1103:./tmk_core/protocol/lufa/lufa.c ****                                     const void** const DescriptorAddress)
1104:./tmk_core/protocol/lufa/lufa.c **** {
 1137               		.loc 1 1104 0
 1138               		.cfi_startproc
 1139               	.LVL97:
 1140               	/* prologue: function */
 1141               	/* frame size = 0 */
 1142               	/* stack size = 0 */
 1143               	.L__stack_usage = 0
1105:./tmk_core/protocol/lufa/lufa.c ****   return get_usb_descriptor(wValue, wIndex, DescriptorAddress);
 1144               		.loc 1 1105 0
 1145 0000 0C94 0000 		jmp get_usb_descriptor
 1146               	.LVL98:
 1147               		.cfi_endproc
 1148               	.LFE136:
 1150               	.global	lufa_driver
 1151               		.section	.data.lufa_driver,"aw",@progbits
 1154               	lufa_driver:
 1155 0000 0000      		.word	gs(keyboard_leds)
 1156 0002 0000      		.word	gs(send_keyboard)
 1157 0004 0000      		.word	gs(send_mouse)
 1158 0006 0000      		.word	gs(send_system)
 1159 0008 0000      		.word	gs(send_consumer)
 1160               		.section	.bss.keyboard_report_sent,"aw",@nobits
 1163               	keyboard_report_sent:
 1164 0000 0000 0000 		.zero	32
 1164      0000 0000 
 1164      0000 0000 
 1164      0000 0000 
 1164      0000 0000 
 1165               		.section	.bss.keyboard_led_stats,"aw",@nobits
 1168               	keyboard_led_stats:
 1169 0000 00        		.zero	1
 1170               	.global	keyboard_protocol
 1171               		.section	.data.keyboard_protocol,"aw",@progbits
 1174               	keyboard_protocol:
 1175 0000 01        		.byte	1
 1176               	.global	keyboard_idle
 1177               		.section	.bss.keyboard_idle,"aw",@nobits
 1180               	keyboard_idle:
 1181 0000 00        		.zero	1
 1182               		.text
 1183               	.Letext0:
 1184               		.file 6 "/usr/lib/avr/include/stdint.h"
 1185               		.file 7 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1186               		.file 8 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1187               		.file 9 "./lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 1188               		.file 10 "./tmk_core/common/report.h"
 1189               		.file 11 "./tmk_core/common/host_driver.h"
 1190               		.file 12 "./tmk_core/protocol/lufa/lufa.h"
 1191               		.file 13 "./quantum/keycode_config.h"
 1192               		.file 14 "./tmk_core/protocol/lufa/outputselect.h"
 1193               		.file 15 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
 1194               		.file 16 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1195               		.file 17 "./lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 1196               		.file 18 "./tmk_core/common/action_util.h"
 1197               		.file 19 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 1198               		.file 20 "./tmk_core/common/suspend.h"
 1199               		.file 21 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 1200               		.file 22 "./tmk_core/common/action.h"
 1201               		.file 23 "./tmk_core/common/keyboard.h"
 1202               		.file 24 "./quantum/rgblight.h"
 1203               		.file 25 "./tmk_core/common/host.h"
 1204               		.file 26 "./tmk_core/protocol/usb_descriptor.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lufa.c
     /tmp/ccR7YXBN.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccR7YXBN.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccR7YXBN.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccR7YXBN.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccR7YXBN.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccR7YXBN.s:12     .text.keyboard_leds:0000000000000000 keyboard_leds
     /tmp/ccR7YXBN.s:1168   .bss.keyboard_led_stats:0000000000000000 keyboard_led_stats
     /tmp/ccR7YXBN.s:29     .text.send_consumer:0000000000000000 send_consumer
     /tmp/ccR7YXBN.s:163    .text.send_system:0000000000000000 send_system
     /tmp/ccR7YXBN.s:284    .text.send_mouse:0000000000000000 send_mouse
     /tmp/ccR7YXBN.s:391    .text.send_keyboard:0000000000000000 send_keyboard
     /tmp/ccR7YXBN.s:1174   .data.keyboard_protocol:0000000000000000 keyboard_protocol
     /tmp/ccR7YXBN.s:1163   .bss.keyboard_report_sent:0000000000000000 keyboard_report_sent
     /tmp/ccR7YXBN.s:574    .text.EVENT_USB_Device_Connect:0000000000000000 EVENT_USB_Device_Connect
     /tmp/ccR7YXBN.s:612    .text.EVENT_USB_Device_Disconnect:0000000000000000 EVENT_USB_Device_Disconnect
     /tmp/ccR7YXBN.s:629    .text.EVENT_USB_Device_Reset:0000000000000000 EVENT_USB_Device_Reset
     /tmp/ccR7YXBN.s:644    .text.EVENT_USB_Device_Suspend:0000000000000000 EVENT_USB_Device_Suspend
     /tmp/ccR7YXBN.s:659    .text.EVENT_USB_Device_WakeUp:0000000000000000 EVENT_USB_Device_WakeUp
     /tmp/ccR7YXBN.s:676    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
     /tmp/ccR7YXBN.s:728    .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
     /tmp/ccR7YXBN.s:1180   .bss.keyboard_idle:0000000000000000 keyboard_idle
     /tmp/ccR7YXBN.s:999    .text.sendchar:0000000000000000 sendchar
     /tmp/ccR7YXBN.s:1018   .text.startup.main:0000000000000000 main
     /tmp/ccR7YXBN.s:1154   .data.lufa_driver:0000000000000000 lufa_driver
     /tmp/ccR7YXBN.s:1135   .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor

UNDEFINED SYMBOLS
where_to_send
Endpoint_Write_Stream_LE
USB_DeviceState
keymap_config
USB_IsInitialized
USB_Disable
USB_Init
suspend_wakeup_init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
Endpoint_ClearStatusStage
clear_keyboard
keyboard_setup
USB_USBTask
keyboard_init
host_set_driver
suspend_power_down
USB_Device_RemoteWakeupEnabled
suspend_wakeup_condition
USB_Device_SendRemoteWakeup
keyboard_task
rgblight_task
get_usb_descriptor
__do_copy_data
__do_clear_bss
