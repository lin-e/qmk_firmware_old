   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_setup,"ax",@progbits
  11               		.weak	matrix_setup
  13               	matrix_setup:
  14               	.LFB103:
  15               		.file 1 "./tmk_core/common/keyboard.c"
   1:./tmk_core/common/keyboard.c **** /*
   2:./tmk_core/common/keyboard.c **** Copyright 2011, 2012, 2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keyboard.c **** 
   4:./tmk_core/common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keyboard.c **** (at your option) any later version.
   8:./tmk_core/common/keyboard.c **** 
   9:./tmk_core/common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keyboard.c **** GNU General Public License for more details.
  13:./tmk_core/common/keyboard.c **** 
  14:./tmk_core/common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keyboard.c **** */
  17:./tmk_core/common/keyboard.c **** 
  18:./tmk_core/common/keyboard.c **** #include <stdint.h>
  19:./tmk_core/common/keyboard.c **** #include "keyboard.h"
  20:./tmk_core/common/keyboard.c **** #include "matrix.h"
  21:./tmk_core/common/keyboard.c **** #include "keymap.h"
  22:./tmk_core/common/keyboard.c **** #include "host.h"
  23:./tmk_core/common/keyboard.c **** #include "led.h"
  24:./tmk_core/common/keyboard.c **** #include "keycode.h"
  25:./tmk_core/common/keyboard.c **** #include "timer.h"
  26:./tmk_core/common/keyboard.c **** #include "print.h"
  27:./tmk_core/common/keyboard.c **** #include "debug.h"
  28:./tmk_core/common/keyboard.c **** #include "command.h"
  29:./tmk_core/common/keyboard.c **** #include "util.h"
  30:./tmk_core/common/keyboard.c **** #include "sendchar.h"
  31:./tmk_core/common/keyboard.c **** #include "eeconfig.h"
  32:./tmk_core/common/keyboard.c **** #include "backlight.h"
  33:./tmk_core/common/keyboard.c **** #include "action_layer.h"
  34:./tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  35:./tmk_core/common/keyboard.c **** #   include "bootmagic.h"
  36:./tmk_core/common/keyboard.c **** #else
  37:./tmk_core/common/keyboard.c **** #   include "magic.h"
  38:./tmk_core/common/keyboard.c **** #endif
  39:./tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  40:./tmk_core/common/keyboard.c **** #   include "mousekey.h"
  41:./tmk_core/common/keyboard.c **** #endif
  42:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  43:./tmk_core/common/keyboard.c **** #   include "ps2_mouse.h"
  44:./tmk_core/common/keyboard.c **** #endif
  45:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  46:./tmk_core/common/keyboard.c **** #   include "serial_mouse.h"
  47:./tmk_core/common/keyboard.c **** #endif
  48:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  49:./tmk_core/common/keyboard.c **** #   include "adb.h"
  50:./tmk_core/common/keyboard.c **** #endif
  51:./tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
  52:./tmk_core/common/keyboard.c **** #   include "rgblight.h"
  53:./tmk_core/common/keyboard.c **** #endif
  54:./tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
  55:./tmk_core/common/keyboard.c **** #   include "process_steno.h"
  56:./tmk_core/common/keyboard.c **** #endif
  57:./tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
  58:./tmk_core/common/keyboard.c **** #   include "fauxclicky.h"
  59:./tmk_core/common/keyboard.c **** #endif
  60:./tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
  61:./tmk_core/common/keyboard.c **** #   include "serial_link/system/serial_link.h"
  62:./tmk_core/common/keyboard.c **** #endif
  63:./tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
  64:./tmk_core/common/keyboard.c **** #   include "visualizer/visualizer.h"
  65:./tmk_core/common/keyboard.c **** #endif
  66:./tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
  67:./tmk_core/common/keyboard.c **** #   include "pointing_device.h"
  68:./tmk_core/common/keyboard.c **** #endif
  69:./tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
  70:./tmk_core/common/keyboard.c **** #   include "process_midi.h"
  71:./tmk_core/common/keyboard.c **** #endif
  72:./tmk_core/common/keyboard.c **** 
  73:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
  74:./tmk_core/common/keyboard.c **** extern const uint16_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
  75:./tmk_core/common/keyboard.c **** static matrix_row_t get_real_keys(uint8_t row, matrix_row_t rowdata){
  76:./tmk_core/common/keyboard.c ****     matrix_row_t out = 0;
  77:./tmk_core/common/keyboard.c ****     for (uint8_t col = 0; col < MATRIX_COLS; col++) {
  78:./tmk_core/common/keyboard.c ****         //read each key in the row data and check if the keymap defines it as a real key
  79:./tmk_core/common/keyboard.c ****         if (pgm_read_byte(&keymaps[0][row][col]) && (rowdata & (1<<col))){
  80:./tmk_core/common/keyboard.c ****             //this creates new row data, if a key is defined in the keymap, it will be set here
  81:./tmk_core/common/keyboard.c ****             out |= 1<<col;
  82:./tmk_core/common/keyboard.c ****         }
  83:./tmk_core/common/keyboard.c ****     }
  84:./tmk_core/common/keyboard.c ****     return out;
  85:./tmk_core/common/keyboard.c **** }
  86:./tmk_core/common/keyboard.c **** 
  87:./tmk_core/common/keyboard.c **** static inline bool popcount_more_than_one(matrix_row_t rowdata)
  88:./tmk_core/common/keyboard.c **** {
  89:./tmk_core/common/keyboard.c ****     rowdata &= rowdata-1; //if there are less than two bits (keys) set, rowdata will become zero
  90:./tmk_core/common/keyboard.c ****     return rowdata;
  91:./tmk_core/common/keyboard.c **** }
  92:./tmk_core/common/keyboard.c **** 
  93:./tmk_core/common/keyboard.c **** static inline bool has_ghost_in_row(uint8_t row, matrix_row_t rowdata)
  94:./tmk_core/common/keyboard.c **** {
  95:./tmk_core/common/keyboard.c ****     /* No ghost exists when less than 2 keys are down on the row.
  96:./tmk_core/common/keyboard.c ****     If there are "active" blanks in the matrix, the key can't be pressed by the user,
  97:./tmk_core/common/keyboard.c ****     there is no doubt as to which keys are really being pressed.
  98:./tmk_core/common/keyboard.c ****     The ghosts will be ignored, they are KC_NO.   */
  99:./tmk_core/common/keyboard.c ****     rowdata = get_real_keys(row, rowdata);
 100:./tmk_core/common/keyboard.c ****     if ((popcount_more_than_one(rowdata)) == 0){
 101:./tmk_core/common/keyboard.c ****         return false;
 102:./tmk_core/common/keyboard.c ****     }
 103:./tmk_core/common/keyboard.c ****     /* Ghost occurs when the row shares a column line with other row,
 104:./tmk_core/common/keyboard.c ****     and two columns are read on each row. Blanks in the matrix don't matter,
 105:./tmk_core/common/keyboard.c ****     so they are filtered out.
 106:./tmk_core/common/keyboard.c ****     If there are two or more real keys pressed and they match columns with
 107:./tmk_core/common/keyboard.c ****     at least two of another row's real keys, the row will be ignored. Keep in mind,
 108:./tmk_core/common/keyboard.c ****     we are checking one row at a time, not all of them at once.
 109:./tmk_core/common/keyboard.c ****     */
 110:./tmk_core/common/keyboard.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 111:./tmk_core/common/keyboard.c ****         if (i != row && popcount_more_than_one(get_real_keys(i, matrix_get_row(i)) & rowdata)){
 112:./tmk_core/common/keyboard.c ****             return true;
 113:./tmk_core/common/keyboard.c ****         }
 114:./tmk_core/common/keyboard.c ****     }
 115:./tmk_core/common/keyboard.c ****     return false;
 116:./tmk_core/common/keyboard.c **** }
 117:./tmk_core/common/keyboard.c **** 
 118:./tmk_core/common/keyboard.c **** #endif
 119:./tmk_core/common/keyboard.c **** 
 120:./tmk_core/common/keyboard.c **** /** \brief matrix_setup
 121:./tmk_core/common/keyboard.c ****  *
 122:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 123:./tmk_core/common/keyboard.c ****  */
 124:./tmk_core/common/keyboard.c **** __attribute__ ((weak))
 125:./tmk_core/common/keyboard.c **** void matrix_setup(void) {
  16               		.loc 1 125 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 0895      		ret
  23               		.cfi_endproc
  24               	.LFE103:
  26               		.section	.text.keyboard_setup,"ax",@progbits
  27               	.global	keyboard_setup
  29               	keyboard_setup:
  30               	.LFB104:
 126:./tmk_core/common/keyboard.c **** }
 127:./tmk_core/common/keyboard.c **** 
 128:./tmk_core/common/keyboard.c **** /** \brief keyboard_setup
 129:./tmk_core/common/keyboard.c ****  *
 130:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 131:./tmk_core/common/keyboard.c ****  */
 132:./tmk_core/common/keyboard.c **** void keyboard_setup(void) {
  31               		.loc 1 132 0
  32               		.cfi_startproc
  33               	/* prologue: function */
  34               	/* frame size = 0 */
  35               	/* stack size = 0 */
  36               	.L__stack_usage = 0
 133:./tmk_core/common/keyboard.c ****     matrix_setup();
  37               		.loc 1 133 0
  38 0000 0C94 0000 		jmp matrix_setup
  39               	.LVL0:
  40               		.cfi_endproc
  41               	.LFE104:
  43               		.section	.text.is_keyboard_master,"ax",@progbits
  44               		.weak	is_keyboard_master
  46               	is_keyboard_master:
  47               	.LFB105:
 134:./tmk_core/common/keyboard.c **** }
 135:./tmk_core/common/keyboard.c **** 
 136:./tmk_core/common/keyboard.c **** /** \brief is_keyboard_master
 137:./tmk_core/common/keyboard.c ****  *
 138:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 139:./tmk_core/common/keyboard.c ****  */
 140:./tmk_core/common/keyboard.c **** __attribute__((weak))
 141:./tmk_core/common/keyboard.c **** bool is_keyboard_master(void) {
  48               		.loc 1 141 0
  49               		.cfi_startproc
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 0 */
  53               	.L__stack_usage = 0
 142:./tmk_core/common/keyboard.c ****     return true;
 143:./tmk_core/common/keyboard.c **** }
  54               		.loc 1 143 0
  55 0000 81E0      		ldi r24,lo8(1)
  56 0002 0895      		ret
  57               		.cfi_endproc
  58               	.LFE105:
  60               		.section	.text.keyboard_init,"ax",@progbits
  61               	.global	keyboard_init
  63               	keyboard_init:
  64               	.LFB106:
 144:./tmk_core/common/keyboard.c **** 
 145:./tmk_core/common/keyboard.c **** /** \brief keyboard_init
 146:./tmk_core/common/keyboard.c ****  *
 147:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 148:./tmk_core/common/keyboard.c ****  */
 149:./tmk_core/common/keyboard.c **** void keyboard_init(void) {
  65               		.loc 1 149 0
  66               		.cfi_startproc
  67               	/* prologue: function */
  68               	/* frame size = 0 */
  69               	/* stack size = 0 */
  70               	.L__stack_usage = 0
 150:./tmk_core/common/keyboard.c ****     timer_init();
  71               		.loc 1 150 0
  72 0000 0E94 0000 		call timer_init
  73               	.LVL1:
 151:./tmk_core/common/keyboard.c ****     matrix_init();
  74               		.loc 1 151 0
  75 0004 0E94 0000 		call matrix_init
  76               	.LVL2:
 152:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 153:./tmk_core/common/keyboard.c ****     ps2_mouse_init();
 154:./tmk_core/common/keyboard.c **** #endif
 155:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 156:./tmk_core/common/keyboard.c ****     serial_mouse_init();
 157:./tmk_core/common/keyboard.c **** #endif
 158:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 159:./tmk_core/common/keyboard.c ****     adb_mouse_init();
 160:./tmk_core/common/keyboard.c **** #endif
 161:./tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
 162:./tmk_core/common/keyboard.c ****     bootmagic();
  77               		.loc 1 162 0
  78 0008 0E94 0000 		call bootmagic
  79               	.LVL3:
 163:./tmk_core/common/keyboard.c **** #else
 164:./tmk_core/common/keyboard.c ****     magic();
 165:./tmk_core/common/keyboard.c **** #endif
 166:./tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
 167:./tmk_core/common/keyboard.c ****     backlight_init();
  80               		.loc 1 167 0
  81 000c 0E94 0000 		call backlight_init
  82               	.LVL4:
 168:./tmk_core/common/keyboard.c **** #endif
 169:./tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
 170:./tmk_core/common/keyboard.c ****     rgblight_init();
  83               		.loc 1 170 0
  84 0010 0C94 0000 		jmp rgblight_init
  85               	.LVL5:
  86               		.cfi_endproc
  87               	.LFE106:
  89               		.section	.text.keyboard_task,"ax",@progbits
  90               	.global	keyboard_task
  92               	keyboard_task:
  93               	.LFB107:
 171:./tmk_core/common/keyboard.c **** #endif
 172:./tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
 173:./tmk_core/common/keyboard.c ****     steno_init();
 174:./tmk_core/common/keyboard.c **** #endif
 175:./tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
 176:./tmk_core/common/keyboard.c ****     fauxclicky_init();
 177:./tmk_core/common/keyboard.c **** #endif
 178:./tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 179:./tmk_core/common/keyboard.c ****     pointing_device_init();
 180:./tmk_core/common/keyboard.c **** #endif
 181:./tmk_core/common/keyboard.c **** #if defined(NKRO_ENABLE) && defined(FORCE_NKRO)
 182:./tmk_core/common/keyboard.c ****     keymap_config.nkro = 1;
 183:./tmk_core/common/keyboard.c **** #endif
 184:./tmk_core/common/keyboard.c **** }
 185:./tmk_core/common/keyboard.c **** 
 186:./tmk_core/common/keyboard.c **** /** \brief Keyboard task: Do keyboard routine jobs
 187:./tmk_core/common/keyboard.c ****  *
 188:./tmk_core/common/keyboard.c ****  * Do routine keyboard jobs: 
 189:./tmk_core/common/keyboard.c ****  *
 190:./tmk_core/common/keyboard.c ****  * * scan matrix
 191:./tmk_core/common/keyboard.c ****  * * handle mouse movements
 192:./tmk_core/common/keyboard.c ****  * * run visualizer code
 193:./tmk_core/common/keyboard.c ****  * * handle midi commands
 194:./tmk_core/common/keyboard.c ****  * * light LEDs
 195:./tmk_core/common/keyboard.c ****  *
 196:./tmk_core/common/keyboard.c ****  * This is repeatedly called as fast as possible.
 197:./tmk_core/common/keyboard.c ****  */
 198:./tmk_core/common/keyboard.c **** void keyboard_task(void)
 199:./tmk_core/common/keyboard.c **** {
  94               		.loc 1 199 0
  95               		.cfi_startproc
  96 0000 4F92      		push r4
  97               	.LCFI0:
  98               		.cfi_def_cfa_offset 3
  99               		.cfi_offset 4, -2
 100 0002 5F92      		push r5
 101               	.LCFI1:
 102               		.cfi_def_cfa_offset 4
 103               		.cfi_offset 5, -3
 104 0004 7F92      		push r7
 105               	.LCFI2:
 106               		.cfi_def_cfa_offset 5
 107               		.cfi_offset 7, -4
 108 0006 8F92      		push r8
 109               	.LCFI3:
 110               		.cfi_def_cfa_offset 6
 111               		.cfi_offset 8, -5
 112 0008 9F92      		push r9
 113               	.LCFI4:
 114               		.cfi_def_cfa_offset 7
 115               		.cfi_offset 9, -6
 116 000a AF92      		push r10
 117               	.LCFI5:
 118               		.cfi_def_cfa_offset 8
 119               		.cfi_offset 10, -7
 120 000c BF92      		push r11
 121               	.LCFI6:
 122               		.cfi_def_cfa_offset 9
 123               		.cfi_offset 11, -8
 124 000e CF92      		push r12
 125               	.LCFI7:
 126               		.cfi_def_cfa_offset 10
 127               		.cfi_offset 12, -9
 128 0010 DF92      		push r13
 129               	.LCFI8:
 130               		.cfi_def_cfa_offset 11
 131               		.cfi_offset 13, -10
 132 0012 EF92      		push r14
 133               	.LCFI9:
 134               		.cfi_def_cfa_offset 12
 135               		.cfi_offset 14, -11
 136 0014 FF92      		push r15
 137               	.LCFI10:
 138               		.cfi_def_cfa_offset 13
 139               		.cfi_offset 15, -12
 140 0016 0F93      		push r16
 141               	.LCFI11:
 142               		.cfi_def_cfa_offset 14
 143               		.cfi_offset 16, -13
 144 0018 1F93      		push r17
 145               	.LCFI12:
 146               		.cfi_def_cfa_offset 15
 147               		.cfi_offset 17, -14
 148 001a CF93      		push r28
 149               	.LCFI13:
 150               		.cfi_def_cfa_offset 16
 151               		.cfi_offset 28, -15
 152 001c DF93      		push r29
 153               	.LCFI14:
 154               		.cfi_def_cfa_offset 17
 155               		.cfi_offset 29, -16
 156 001e CDB7      		in r28,__SP_L__
 157 0020 DEB7      		in r29,__SP_H__
 158               	.LCFI15:
 159               		.cfi_def_cfa_register 28
 160 0022 2A97      		sbiw r28,10
 161               	.LCFI16:
 162               		.cfi_def_cfa_offset 27
 163 0024 0FB6      		in __tmp_reg__,__SREG__
 164 0026 F894      		cli
 165 0028 DEBF      		out __SP_H__,r29
 166 002a 0FBE      		out __SREG__,__tmp_reg__
 167 002c CDBF      		out __SP_L__,r28
 168               	/* prologue: function */
 169               	/* frame size = 10 */
 170               	/* stack size = 25 */
 171               	.L__stack_usage = 25
 172               	.LVL6:
 200:./tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 201:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 202:./tmk_core/common/keyboard.c ****   //  static matrix_row_t matrix_ghost[MATRIX_ROWS];
 203:./tmk_core/common/keyboard.c **** #endif
 204:./tmk_core/common/keyboard.c ****     static uint8_t led_status = 0;
 205:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_row = 0;
 206:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_change = 0;
 207:./tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 208:./tmk_core/common/keyboard.c ****     uint8_t keys_processed = 0;
 209:./tmk_core/common/keyboard.c **** #endif
 210:./tmk_core/common/keyboard.c **** 
 211:./tmk_core/common/keyboard.c ****     matrix_scan();
 173               		.loc 1 211 0
 174 002e 0E94 0000 		call matrix_scan
 175               	.LVL7:
 212:./tmk_core/common/keyboard.c ****     if (is_keyboard_master()) {
 176               		.loc 1 212 0
 177 0032 0E94 0000 		call is_keyboard_master
 178               	.LVL8:
 179 0036 8111      		cpse r24,__zero_reg__
 180 0038 00C0      		rjmp .L6
 181               	.LVL9:
 182               	.L10:
 213:./tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 214:./tmk_core/common/keyboard.c ****             matrix_row = matrix_get_row(r);
 215:./tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 216:./tmk_core/common/keyboard.c ****             if (matrix_change) {
 217:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 218:./tmk_core/common/keyboard.c ****                 if (has_ghost_in_row(r, matrix_row)) {
 219:./tmk_core/common/keyboard.c ****                     /* Keep track of whether ghosted status has changed for
 220:./tmk_core/common/keyboard.c ****                     * debugging. But don't update matrix_prev until un-ghosted, or
 221:./tmk_core/common/keyboard.c ****                     * the last key would be lost.
 222:./tmk_core/common/keyboard.c ****                     */
 223:./tmk_core/common/keyboard.c ****                     //if (debug_matrix && matrix_ghost[r] != matrix_row) {
 224:./tmk_core/common/keyboard.c ****                     //    matrix_print();
 225:./tmk_core/common/keyboard.c ****                     //}
 226:./tmk_core/common/keyboard.c ****                     //matrix_ghost[r] = matrix_row;
 227:./tmk_core/common/keyboard.c ****                     continue;
 228:./tmk_core/common/keyboard.c ****                 }
 229:./tmk_core/common/keyboard.c ****                 //matrix_ghost[r] = matrix_row;
 230:./tmk_core/common/keyboard.c **** #endif
 231:./tmk_core/common/keyboard.c ****                 if (debug_matrix) matrix_print();
 232:./tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 233:./tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1<<c)) {
 234:./tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 235:./tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 236:./tmk_core/common/keyboard.c ****                             .pressed = (matrix_row & ((matrix_row_t)1<<c)),
 237:./tmk_core/common/keyboard.c ****                             .time = (timer_read() | 1) /* time should not be 0 */
 238:./tmk_core/common/keyboard.c ****                         });
 239:./tmk_core/common/keyboard.c ****                         // record a processed key
 240:./tmk_core/common/keyboard.c ****                         matrix_prev[r] ^= ((matrix_row_t)1<<c);
 241:./tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 242:./tmk_core/common/keyboard.c ****                         // only jump out if we have processed "enough" keys.
 243:./tmk_core/common/keyboard.c ****                         if (++keys_processed >= QMK_KEYS_PER_SCAN)
 244:./tmk_core/common/keyboard.c **** #endif
 245:./tmk_core/common/keyboard.c ****                         // process a key per task call
 246:./tmk_core/common/keyboard.c ****                         goto MATRIX_LOOP_END;
 247:./tmk_core/common/keyboard.c ****                     }
 248:./tmk_core/common/keyboard.c ****                 }
 249:./tmk_core/common/keyboard.c ****             }
 250:./tmk_core/common/keyboard.c ****         }
 251:./tmk_core/common/keyboard.c ****     }
 252:./tmk_core/common/keyboard.c ****     // call with pseudo tick event when no real key event.
 253:./tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 254:./tmk_core/common/keyboard.c ****     // we can get here with some keys processed now.
 255:./tmk_core/common/keyboard.c ****     if (!keys_processed)
 256:./tmk_core/common/keyboard.c **** #endif
 257:./tmk_core/common/keyboard.c ****     action_exec(TICK);
 183               		.loc 1 257 0
 184 003a 8FEF      		ldi r24,lo8(-1)
 185 003c 8983      		std Y+1,r24
 186 003e 8A83      		std Y+2,r24
 187 0040 1B82      		std Y+3,__zero_reg__
 188 0042 0E94 0000 		call timer_read
 189               	.LVL10:
 190 0046 8160      		ori r24,1
 191 0048 782F      		mov r23,r24
 192 004a 9D83      		std Y+5,r25
 193 004c 8C83      		std Y+4,r24
 194 004e 4981      		ldd r20,Y+1
 195 0050 5A81      		ldd r21,Y+2
 196 0052 6B81      		ldd r22,Y+3
 197 0054 8D81      		ldd r24,Y+5
 198 0056 0E94 0000 		call action_exec
 199               	.LVL11:
 200 005a 00C0      		rjmp .L7
 201               	.LVL12:
 202               	.L6:
 203 005c 90E0      		ldi r25,lo8(matrix_prev.5308)
 204 005e C92E      		mov r12,r25
 205 0060 90E0      		ldi r25,hi8(matrix_prev.5308)
 206 0062 D92E      		mov r13,r25
 212:./tmk_core/common/keyboard.c ****     if (is_keyboard_master()) {
 207               		.loc 1 212 0
 208 0064 00E0      		ldi r16,0
 209 0066 10E0      		ldi r17,0
 210               	.LBB6:
 211               	.LBB7:
 233:./tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 212               		.loc 1 233 0
 213 0068 AA24      		clr r10
 214 006a A394      		inc r10
 215 006c B12C      		mov r11,__zero_reg__
 216               	.LVL13:
 217               	.L9:
 218 006e 702E      		mov r7,r16
 219               	.LVL14:
 220               	.LBE7:
 214:./tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 221               		.loc 1 214 0
 222 0070 802F      		mov r24,r16
 223 0072 0E94 0000 		call matrix_get_row
 224               	.LVL15:
 225 0076 4C01      		movw r8,r24
 226               	.LVL16:
 215:./tmk_core/common/keyboard.c ****             if (matrix_change) {
 227               		.loc 1 215 0
 228 0078 F601      		movw r30,r12
 229 007a 4190      		ld r4,Z+
 230 007c 5190      		ld r5,Z+
 231 007e 6F01      		movw r12,r30
 232 0080 4826      		eor r4,r24
 233 0082 5926      		eor r5,r25
 234               	.LVL17:
 216:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 235               		.loc 1 216 0
 236 0084 4114      		cp r4,__zero_reg__
 237 0086 5104      		cpc r5,__zero_reg__
 238 0088 01F4      		brne .L8
 239               	.L15:
 240               	.LVL18:
 241 008a 0F5F      		subi r16,-1
 242 008c 1F4F      		sbci r17,-1
 243               	.LVL19:
 213:./tmk_core/common/keyboard.c ****             matrix_row = matrix_get_row(r);
 244               		.loc 1 213 0
 245 008e 0530      		cpi r16,5
 246 0090 1105      		cpc r17,__zero_reg__
 247 0092 01F4      		brne .L9
 248 0094 00C0      		rjmp .L10
 249               	.L8:
 231:./tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 250               		.loc 1 231 0
 251 0096 8091 0000 		lds r24,debug_config
 252 009a 81FD      		sbrc r24,1
 231:./tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 253               		.loc 1 231 0 is_stmt 0 discriminator 1
 254 009c 0E94 0000 		call matrix_print
 255               	.LVL20:
 256               	.L11:
 257               	.LBE6:
 212:./tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 258               		.loc 1 212 0 is_stmt 1
 259 00a0 20E0      		ldi r18,0
 260 00a2 30E0      		ldi r19,0
 261               	.LVL21:
 262               	.L14:
 263               	.LBB9:
 264               	.LBB8:
 233:./tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 265               		.loc 1 233 0
 266 00a4 7501      		movw r14,r10
 267 00a6 022E      		mov r0,r18
 268 00a8 00C0      		rjmp 2f
 269               		1:
 270 00aa EE0C      		lsl r14
 271 00ac FF1C      		rol r15
 272               		2:
 273 00ae 0A94      		dec r0
 274 00b0 02F4      		brpl 1b
 275 00b2 C701      		movw r24,r14
 276 00b4 8421      		and r24,r4
 277 00b6 9521      		and r25,r5
 278 00b8 892B      		or r24,r25
 279 00ba 01F0      		breq .L12
 234:./tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 280               		.loc 1 234 0
 281 00bc 2E83      		std Y+6,r18
 282 00be 7F82      		std Y+7,r7
 236:./tmk_core/common/keyboard.c ****                             .time = (timer_read() | 1) /* time should not be 0 */
 283               		.loc 1 236 0
 284 00c0 8E20      		and r8,r14
 285 00c2 9F20      		and r9,r15
 286               	.LVL22:
 287 00c4 91E0      		ldi r25,lo8(1)
 288 00c6 8928      		or r8,r9
 289 00c8 01F4      		brne .L13
 290 00ca 90E0      		ldi r25,0
 291               	.L13:
 234:./tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 292               		.loc 1 234 0
 293 00cc 9887      		std Y+8,r25
 237:./tmk_core/common/keyboard.c ****                         });
 294               		.loc 1 237 0
 295 00ce 0E94 0000 		call timer_read
 296               	.LVL23:
 297 00d2 8160      		ori r24,1
 234:./tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 298               		.loc 1 234 0
 299 00d4 782F      		mov r23,r24
 300 00d6 9A87      		std Y+10,r25
 301 00d8 8987      		std Y+9,r24
 302 00da 4E81      		ldd r20,Y+6
 303 00dc 5F81      		ldd r21,Y+7
 304 00de 6885      		ldd r22,Y+8
 305 00e0 8A85      		ldd r24,Y+10
 306 00e2 0E94 0000 		call action_exec
 307               	.LVL24:
 240:./tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 308               		.loc 1 240 0
 309 00e6 000F      		lsl r16
 310 00e8 111F      		rol r17
 311               	.LVL25:
 312 00ea F801      		movw r30,r16
 313 00ec E050      		subi r30,lo8(-(matrix_prev.5308))
 314 00ee F040      		sbci r31,hi8(-(matrix_prev.5308))
 315 00f0 8081      		ld r24,Z
 316 00f2 9181      		ldd r25,Z+1
 317 00f4 E826      		eor r14,r24
 318 00f6 F926      		eor r15,r25
 319 00f8 F182      		std Z+1,r15
 320 00fa E082      		st Z,r14
 246:./tmk_core/common/keyboard.c ****                     }
 321               		.loc 1 246 0
 322 00fc 00C0      		rjmp .L7
 323               	.LVL26:
 324               	.L12:
 325 00fe 2F5F      		subi r18,-1
 326 0100 3F4F      		sbci r19,-1
 327               	.LVL27:
 232:./tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1<<c)) {
 328               		.loc 1 232 0 discriminator 2
 329 0102 2F30      		cpi r18,15
 330 0104 3105      		cpc r19,__zero_reg__
 331 0106 01F4      		brne .L14
 332 0108 00C0      		rjmp .L15
 333               	.LVL28:
 334               	.L7:
 335               	.LBE8:
 336               	.LBE9:
 258:./tmk_core/common/keyboard.c **** 
 259:./tmk_core/common/keyboard.c **** MATRIX_LOOP_END:
 260:./tmk_core/common/keyboard.c **** 
 261:./tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 262:./tmk_core/common/keyboard.c ****     // mousekey repeat & acceleration
 263:./tmk_core/common/keyboard.c ****     mousekey_task();
 337               		.loc 1 263 0
 338 010a 0E94 0000 		call mousekey_task
 339               	.LVL29:
 264:./tmk_core/common/keyboard.c **** #endif
 265:./tmk_core/common/keyboard.c **** 
 266:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 267:./tmk_core/common/keyboard.c ****     ps2_mouse_task();
 268:./tmk_core/common/keyboard.c **** #endif
 269:./tmk_core/common/keyboard.c **** 
 270:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 271:./tmk_core/common/keyboard.c ****     serial_mouse_task();
 272:./tmk_core/common/keyboard.c **** #endif
 273:./tmk_core/common/keyboard.c **** 
 274:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 275:./tmk_core/common/keyboard.c ****     adb_mouse_task();
 276:./tmk_core/common/keyboard.c **** #endif
 277:./tmk_core/common/keyboard.c **** 
 278:./tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
 279:./tmk_core/common/keyboard.c **** 	serial_link_update();
 280:./tmk_core/common/keyboard.c **** #endif
 281:./tmk_core/common/keyboard.c **** 
 282:./tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
 283:./tmk_core/common/keyboard.c ****     visualizer_update(default_layer_state, layer_state, visualizer_get_mods(), host_keyboard_leds()
 284:./tmk_core/common/keyboard.c **** #endif
 285:./tmk_core/common/keyboard.c **** 
 286:./tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 287:./tmk_core/common/keyboard.c ****     pointing_device_task();
 288:./tmk_core/common/keyboard.c **** #endif
 289:./tmk_core/common/keyboard.c **** 
 290:./tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
 291:./tmk_core/common/keyboard.c ****     midi_task();
 292:./tmk_core/common/keyboard.c **** #endif
 293:./tmk_core/common/keyboard.c **** 
 294:./tmk_core/common/keyboard.c ****     // update LED
 295:./tmk_core/common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 340               		.loc 1 295 0
 341 010e 1091 0000 		lds r17,led_status.5309
 342 0112 0E94 0000 		call host_keyboard_leds
 343               	.LVL30:
 344 0116 1817      		cp r17,r24
 345 0118 01F0      		breq .L5
 296:./tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 346               		.loc 1 296 0
 347 011a 0E94 0000 		call host_keyboard_leds
 348               	.LVL31:
 349 011e 8093 0000 		sts led_status.5309,r24
 350               	.LVL32:
 351               	/* epilogue start */
 297:./tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 298:./tmk_core/common/keyboard.c ****     }
 299:./tmk_core/common/keyboard.c **** }
 352               		.loc 1 299 0
 353 0122 2A96      		adiw r28,10
 354 0124 0FB6      		in __tmp_reg__,__SREG__
 355 0126 F894      		cli
 356 0128 DEBF      		out __SP_H__,r29
 357 012a 0FBE      		out __SREG__,__tmp_reg__
 358 012c CDBF      		out __SP_L__,r28
 359 012e DF91      		pop r29
 360 0130 CF91      		pop r28
 361 0132 1F91      		pop r17
 362 0134 0F91      		pop r16
 363 0136 FF90      		pop r15
 364 0138 EF90      		pop r14
 365 013a DF90      		pop r13
 366 013c CF90      		pop r12
 367 013e BF90      		pop r11
 368 0140 AF90      		pop r10
 369 0142 9F90      		pop r9
 370 0144 8F90      		pop r8
 371 0146 7F90      		pop r7
 372 0148 5F90      		pop r5
 373 014a 4F90      		pop r4
 374               	.LBB10:
 375               	.LBB11:
 300:./tmk_core/common/keyboard.c **** 
 301:./tmk_core/common/keyboard.c **** /** \brief keyboard set leds
 302:./tmk_core/common/keyboard.c ****  *
 303:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 304:./tmk_core/common/keyboard.c ****  */
 305:./tmk_core/common/keyboard.c **** void keyboard_set_leds(uint8_t leds)
 306:./tmk_core/common/keyboard.c **** {
 307:./tmk_core/common/keyboard.c ****     if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 308:./tmk_core/common/keyboard.c ****     led_set(leds);
 376               		.loc 1 308 0
 377 014c 0C94 0000 		jmp led_set
 378               	.LVL33:
 379               	.L5:
 380               	/* epilogue start */
 381               	.LBE11:
 382               	.LBE10:
 299:./tmk_core/common/keyboard.c **** 
 383               		.loc 1 299 0
 384 0150 2A96      		adiw r28,10
 385 0152 0FB6      		in __tmp_reg__,__SREG__
 386 0154 F894      		cli
 387 0156 DEBF      		out __SP_H__,r29
 388 0158 0FBE      		out __SREG__,__tmp_reg__
 389 015a CDBF      		out __SP_L__,r28
 390 015c DF91      		pop r29
 391 015e CF91      		pop r28
 392 0160 1F91      		pop r17
 393 0162 0F91      		pop r16
 394 0164 FF90      		pop r15
 395 0166 EF90      		pop r14
 396 0168 DF90      		pop r13
 397 016a CF90      		pop r12
 398 016c BF90      		pop r11
 399 016e AF90      		pop r10
 400 0170 9F90      		pop r9
 401 0172 8F90      		pop r8
 402 0174 7F90      		pop r7
 403 0176 5F90      		pop r5
 404 0178 4F90      		pop r4
 405 017a 0895      		ret
 406               		.cfi_endproc
 407               	.LFE107:
 409               		.section	.text.keyboard_set_leds,"ax",@progbits
 410               	.global	keyboard_set_leds
 412               	keyboard_set_leds:
 413               	.LFB108:
 306:./tmk_core/common/keyboard.c ****     if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 414               		.loc 1 306 0
 415               		.cfi_startproc
 416               	.LVL34:
 417               	/* prologue: function */
 418               	/* frame size = 0 */
 419               	/* stack size = 0 */
 420               	.L__stack_usage = 0
 421               		.loc 1 308 0
 422 0000 0C94 0000 		jmp led_set
 423               	.LVL35:
 424               		.cfi_endproc
 425               	.LFE108:
 427               		.section	.bss.led_status.5309,"aw",@nobits
 430               	led_status.5309:
 431 0000 00        		.zero	1
 432               		.section	.bss.matrix_prev.5308,"aw",@nobits
 435               	matrix_prev.5308:
 436 0000 0000 0000 		.zero	10
 436      0000 0000 
 436      0000 
 437               		.text
 438               	.Letext0:
 439               		.file 2 "/usr/lib/avr/include/stdint.h"
 440               		.file 3 "./tmk_core/common/keyboard.h"
 441               		.file 4 "./tmk_core/common/matrix.h"
 442               		.file 5 "./tmk_core/common/debug.h"
 443               		.file 6 "./lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 444               		.file 7 "./tmk_core/common/timer.h"
 445               		.file 8 "./tmk_core/common/bootmagic.h"
 446               		.file 9 "./tmk_core/common/backlight.h"
 447               		.file 10 "./quantum/rgblight.h"
 448               		.file 11 "./tmk_core/common/action.h"
 449               		.file 12 "./tmk_core/common/led.h"
 450               		.file 13 "./tmk_core/common/mousekey.h"
 451               		.file 14 "./tmk_core/common/host.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keyboard.c
     /tmp/ccywT02H.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccywT02H.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccywT02H.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccywT02H.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccywT02H.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccywT02H.s:13     .text.matrix_setup:0000000000000000 matrix_setup
     /tmp/ccywT02H.s:29     .text.keyboard_setup:0000000000000000 keyboard_setup
     /tmp/ccywT02H.s:46     .text.is_keyboard_master:0000000000000000 is_keyboard_master
     /tmp/ccywT02H.s:63     .text.keyboard_init:0000000000000000 keyboard_init
     /tmp/ccywT02H.s:92     .text.keyboard_task:0000000000000000 keyboard_task
     /tmp/ccywT02H.s:435    .bss.matrix_prev.5308:0000000000000000 matrix_prev.5308
     /tmp/ccywT02H.s:430    .bss.led_status.5309:0000000000000000 led_status.5309
     /tmp/ccywT02H.s:412    .text.keyboard_set_leds:0000000000000000 keyboard_set_leds

UNDEFINED SYMBOLS
timer_init
matrix_init
bootmagic
backlight_init
rgblight_init
matrix_scan
timer_read
action_exec
matrix_get_row
debug_config
matrix_print
mousekey_task
host_keyboard_leds
led_set
__do_clear_bss
